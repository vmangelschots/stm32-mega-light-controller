
mega light controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc8  08006fc8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fd0  08006fd0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd4  08006fd4  00016fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a44  20000018  08006ff0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a5c  08006ff0  00024a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019dba  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fcf  00000000  00000000  00039e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e0  00000000  00000000  0003cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b0  00000000  00000000  0003e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000309b  00000000  00000000  0003f868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001084a  00000000  00000000  00042903  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000976bb  00000000  00000000  0005314d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea808  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d34  00000000  00000000  000ea884  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000018 	.word	0x20000018
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f1c 	.word	0x08006f1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000001c 	.word	0x2000001c
 80001dc:	08006f1c 	.word	0x08006f1c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fbd0 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f828 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f8de 	bl	80006ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f0:	f000 f884 	bl	80005fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f8b0 	bl	8000658 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f003 ff9e 	bl	8004438 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <main+0x44>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <main+0x48>)
 8000502:	f004 f803 	bl	800450c <osThreadNew>
 8000506:	4602      	mov	r2, r0
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <main+0x4c>)
 800050a:	601a      	str	r2, [r3, #0]

  /* creation of lightcontroller */
  lightcontrollerHandle = osThreadNew(StartLightcontroller, NULL, &lightcontroller_attributes);
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <main+0x50>)
 800050e:	2100      	movs	r1, #0
 8000510:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x54>)
 8000512:	f003 fffb 	bl	800450c <osThreadNew>
 8000516:	4602      	mov	r2, r0
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <main+0x58>)
 800051a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f003 ffc0 	bl	80044a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x40>
 8000522:	bf00      	nop
 8000524:	08006f68 	.word	0x08006f68
 8000528:	08000871 	.word	0x08000871
 800052c:	2000493c 	.word	0x2000493c
 8000530:	08006f8c 	.word	0x08006f8c
 8000534:	080008e1 	.word	0x080008e1
 8000538:	200049d4 	.word	0x200049d4

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f006 fcdd 	bl	8006f0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <SystemClock_Config+0xb8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xb8>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SystemClock_Config+0xb8>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <SystemClock_Config+0xbc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000588:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <SystemClock_Config+0xbc>)
 800058a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <SystemClock_Config+0xbc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0320 	add.w	r3, r7, #32
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fce3 	bl	8002f7c <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005bc:	f000 f9c4 	bl	8000948 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 ff3e 	bl	800345c <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005e6:	f000 f9af 	bl	8000948 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_I2C1_Init+0x50>)
 8000602:	4a13      	ldr	r2, [pc, #76]	; (8000650 <MX_I2C1_Init+0x54>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C1_Init+0x50>)
 8000608:	4a12      	ldr	r2, [pc, #72]	; (8000654 <MX_I2C1_Init+0x58>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 100;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_I2C1_Init+0x50>)
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_I2C1_Init+0x50>)
 800061a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800061e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b0a      	ldr	r3, [pc, #40]	; (800064c <MX_I2C1_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_I2C1_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_I2C1_Init+0x50>)
 800063a:	f000 fe15 	bl	8001268 <HAL_I2C_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 f980 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20004940 	.word	0x20004940
 8000650:	40005400 	.word	0x40005400
 8000654:	000186a0 	.word	0x000186a0

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_USART1_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000690:	f003 fb00 	bl	8003c94 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f955 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20004994 	.word	0x20004994
 80006a8:	40011000 	.word	0x40011000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	4b58      	ldr	r3, [pc, #352]	; (8000828 <MX_GPIO_Init+0x17c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a57      	ldr	r2, [pc, #348]	; (8000828 <MX_GPIO_Init+0x17c>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b55      	ldr	r3, [pc, #340]	; (8000828 <MX_GPIO_Init+0x17c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	4b51      	ldr	r3, [pc, #324]	; (8000828 <MX_GPIO_Init+0x17c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a50      	ldr	r2, [pc, #320]	; (8000828 <MX_GPIO_Init+0x17c>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b4e      	ldr	r3, [pc, #312]	; (8000828 <MX_GPIO_Init+0x17c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	4b4a      	ldr	r3, [pc, #296]	; (8000828 <MX_GPIO_Init+0x17c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a49      	ldr	r2, [pc, #292]	; (8000828 <MX_GPIO_Init+0x17c>)
 8000704:	f043 0302 	orr.w	r3, r3, #2
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b47      	ldr	r3, [pc, #284]	; (8000828 <MX_GPIO_Init+0x17c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0302 	and.w	r3, r3, #2
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b43      	ldr	r3, [pc, #268]	; (8000828 <MX_GPIO_Init+0x17c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a42      	ldr	r2, [pc, #264]	; (8000828 <MX_GPIO_Init+0x17c>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b40      	ldr	r3, [pc, #256]	; (8000828 <MX_GPIO_Init+0x17c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000732:	2200      	movs	r2, #0
 8000734:	f641 31c4 	movw	r1, #7108	; 0x1bc4
 8000738:	483c      	ldr	r0, [pc, #240]	; (800082c <MX_GPIO_Init+0x180>)
 800073a:	f000 fd7b 	bl	8001234 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 800073e:	2200      	movs	r2, #0
 8000740:	f24f 7134 	movw	r1, #63284	; 0xf734
 8000744:	483a      	ldr	r0, [pc, #232]	; (8000830 <MX_GPIO_Init+0x184>)
 8000746:	f000 fd75 	bl	8001234 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000750:	4838      	ldr	r0, [pc, #224]	; (8000834 <MX_GPIO_Init+0x188>)
 8000752:	f000 fd6f 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2104      	movs	r1, #4
 800075a:	4837      	ldr	r0, [pc, #220]	; (8000838 <MX_GPIO_Init+0x18c>)
 800075c:	f000 fd6a 	bl	8001234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC6 PC7 PC8
                           PC9 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000760:	f641 33c4 	movw	r3, #7108	; 0x1bc4
 8000764:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	482c      	ldr	r0, [pc, #176]	; (800082c <MX_GPIO_Init+0x180>)
 800077a:	f000 fbd9 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800077e:	23ff      	movs	r3, #255	; 0xff
 8000780:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	4828      	ldr	r0, [pc, #160]	; (8000834 <MX_GPIO_Init+0x188>)
 8000792:	f000 fbcd 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000796:	2330      	movs	r3, #48	; 0x30
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4820      	ldr	r0, [pc, #128]	; (800082c <MX_GPIO_Init+0x180>)
 80007aa:	f000 fbc1 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ae:	2303      	movs	r3, #3
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	481b      	ldr	r0, [pc, #108]	; (8000830 <MX_GPIO_Init+0x184>)
 80007c2:	f000 fbb5 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB13
                           PB14 PB15 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 80007c6:	f24f 7334 	movw	r3, #63284	; 0xf734
 80007ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4814      	ldr	r0, [pc, #80]	; (8000830 <MX_GPIO_Init+0x184>)
 80007e0:	f000 fba6 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <MX_GPIO_Init+0x188>)
 80007fe:	f000 fb97 	bl	8000f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000802:	2304      	movs	r3, #4
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <MX_GPIO_Init+0x18c>)
 800081a:	f000 fb89 	bl	8000f30 <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40020800 	.word	0x40020800
 8000830:	40020400 	.word	0x40020400
 8000834:	40020000 	.word	0x40020000
 8000838:	40020c00 	.word	0x40020c00

0800083c <HAL_I2C_ListenCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  osDelay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f003 ff07 	bl	8004658 <osDelay>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
 800085a:	460b      	mov	r3, r1
 800085c:	70fb      	strb	r3, [r7, #3]
 800085e:	4613      	mov	r3, r2
 8000860:	803b      	strh	r3, [r7, #0]
  osDelay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f003 fef8 	bl	8004658 <osDelay>
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint8_t buf[10];
  for(int i =0; i< 10;i++){
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	e00c      	b.n	8000898 <StartDefaultTask+0x28>
    buf[i] = i+16;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	3310      	adds	r3, #16
 8000884:	b2d9      	uxtb	r1, r3
 8000886:	f107 020c 	add.w	r2, r7, #12
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	4413      	add	r3, r2
 800088e:	460a      	mov	r2, r1
 8000890:	701a      	strb	r2, [r3, #0]
  for(int i =0; i< 10;i++){
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3301      	adds	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	2b09      	cmp	r3, #9
 800089c:	ddef      	ble.n	800087e <StartDefaultTask+0xe>
  }
  HAL_StatusTypeDef stat;
  uint8_t dir = -1;
 800089e:	23ff      	movs	r3, #255	; 0xff
 80008a0:	76fb      	strb	r3, [r7, #27]
  uint8_t match_code = -1;
 80008a2:	23ff      	movs	r3, #255	; 0xff
 80008a4:	76bb      	strb	r3, [r7, #26]
  HAL_I2C_EnableListen_IT(&hi2c1);
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <StartDefaultTask+0x6c>)
 80008a8:	f000 fe86 	bl	80015b8 <HAL_I2C_EnableListen_IT>

  for(;;)
  {

     stat = HAL_I2C_Slave_Receive_IT(&hi2c1, &buf, 1);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2201      	movs	r2, #1
 80008b2:	4619      	mov	r1, r3
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <StartDefaultTask+0x6c>)
 80008b6:	f000 fe0f 	bl	80014d8 <HAL_I2C_Slave_Receive_IT>
 80008ba:	4603      	mov	r3, r0
 80008bc:	767b      	strb	r3, [r7, #25]

     while(HAL_I2C_GetState(&hi2c1)== HAL_I2C_STATE_BUSY_RX){
 80008be:	e002      	b.n	80008c6 <StartDefaultTask+0x56>
       osDelay(100);
 80008c0:	2064      	movs	r0, #100	; 0x64
 80008c2:	f003 fec9 	bl	8004658 <osDelay>
     while(HAL_I2C_GetState(&hi2c1)== HAL_I2C_STATE_BUSY_RX){
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <StartDefaultTask+0x6c>)
 80008c8:	f001 f910 	bl	8001aec <HAL_I2C_GetState>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b22      	cmp	r3, #34	; 0x22
 80008d0:	d0f6      	beq.n	80008c0 <StartDefaultTask+0x50>
     }
     osDelay(100);
 80008d2:	2064      	movs	r0, #100	; 0x64
 80008d4:	f003 fec0 	bl	8004658 <osDelay>
     stat = HAL_I2C_Slave_Receive_IT(&hi2c1, &buf, 1);
 80008d8:	e7e8      	b.n	80008ac <StartDefaultTask+0x3c>
 80008da:	bf00      	nop
 80008dc:	20004940 	.word	0x20004940

080008e0 <StartLightcontroller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLightcontroller */
void StartLightcontroller(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLightcontroller */
  /* Infinite loop */
  for(;;)
  {
    for(int i = 0;i<1;i++){
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	e00f      	b.n	800090e <StartLightcontroller+0x2e>
      HAL_GPIO_WritePin(pinInfo[i].port,pinInfo[i].pin,GPIO_PIN_SET );
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <StartLightcontroller+0x40>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <StartLightcontroller+0x40>)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	4413      	add	r3, r2
 80008fe:	889b      	ldrh	r3, [r3, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	4619      	mov	r1, r3
 8000904:	f000 fc96 	bl	8001234 <HAL_GPIO_WritePin>
    for(int i = 0;i<1;i++){
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b00      	cmp	r3, #0
 8000912:	ddec      	ble.n	80008ee <StartLightcontroller+0xe>
    }
    osDelay(1000);
 8000914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000918:	f003 fe9e 	bl	8004658 <osDelay>
    for(int i = 0;i<1;i++){
 800091c:	e7e4      	b.n	80008e8 <StartLightcontroller+0x8>
 800091e:	bf00      	nop
 8000920:	20000000 	.word	0x20000000

08000924 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d101      	bne.n	800093a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000936:	f000 f9c9 	bl	8000ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010000 	.word	0x40010000

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <HAL_I2C_MspInit+0xa4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d13b      	bne.n	8000a42 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e6:	23c0      	movs	r3, #192	; 0xc0
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f6:	2304      	movs	r3, #4
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4814      	ldr	r0, [pc, #80]	; (8000a54 <HAL_I2C_MspInit+0xac>)
 8000a02:	f000 fa95 	bl	8000f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 8000a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_I2C_MspInit+0xa8>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	201f      	movs	r0, #31
 8000a28:	f000 fa28 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a2c:	201f      	movs	r0, #31
 8000a2e:	f000 fa41 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2020      	movs	r0, #32
 8000a38:	f000 fa20 	bl	8000e7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f000 fa39 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40005400 	.word	0x40005400
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_UART_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12c      	bne.n	8000ad4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a84:	f043 0310 	orr.w	r3, r3, #16
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_UART_MspInit+0x88>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ab2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ac4:	2307      	movs	r3, #7
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <HAL_UART_MspInit+0x8c>)
 8000ad0:	f000 fa2e 	bl	8000f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40011000 	.word	0x40011000
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	2019      	movs	r0, #25
 8000afe:	f000 f9bd 	bl	8000e7c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b02:	2019      	movs	r0, #25
 8000b04:	f000 f9d6 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <HAL_InitTick+0xa0>)
 8000b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b10:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <HAL_InitTick+0xa0>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6453      	str	r3, [r2, #68]	; 0x44
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <HAL_InitTick+0xa0>)
 8000b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b24:	f107 0210 	add.w	r2, r7, #16
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f002 fe60 	bl	80037f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b34:	f002 fe4a 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8000b38:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <HAL_InitTick+0xa4>)
 8000b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b42:	0c9b      	lsrs	r3, r3, #18
 8000b44:	3b01      	subs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_InitTick+0xa8>)
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_InitTick+0xac>)
 8000b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_InitTick+0xa8>)
 8000b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_InitTick+0xa8>)
 8000b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_InitTick+0xa8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_InitTick+0xa8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <HAL_InitTick+0xa8>)
 8000b6a:	f002 fe75 	bl	8003858 <HAL_TIM_Base_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d104      	bne.n	8000b7e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <HAL_InitTick+0xa8>)
 8000b76:	f002 fea4 	bl	80038c2 <HAL_TIM_Base_Start_IT>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3730      	adds	r7, #48	; 0x30
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	431bde83 	.word	0x431bde83
 8000b90:	200049d8 	.word	0x200049d8
 8000b94:	40010000 	.word	0x40010000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bd2:	f002 fe9a 	bl	800390a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200049d8 	.word	0x200049d8

08000be0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <I2C1_EV_IRQHandler+0x10>)
 8000be6:	f000 fd1d 	bl	8001624 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20004940 	.word	0x20004940

08000bf4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <I2C1_ER_IRQHandler+0x10>)
 8000bfa:	f000 fe80 	bl	80018fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20004940 	.word	0x20004940

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <SystemInit+0x28>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <SystemInit+0x28>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SystemInit+0x28>)
 8000c1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c22:	609a      	str	r2, [r3, #8]
#endif
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c3a:	e003      	b.n	8000c44 <LoopCopyDataInit>

08000c3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c42:	3104      	adds	r1, #4

08000c44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c4c:	d3f6      	bcc.n	8000c3c <CopyDataInit>
  ldr  r2, =_sbss
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c50:	e002      	b.n	8000c58 <LoopFillZerobss>

08000c52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c54:	f842 3b04 	str.w	r3, [r2], #4

08000c58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c5c:	d3f9      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5e:	f7ff ffd3 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c62:	f006 f923 	bl	8006eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fc3b 	bl	80004e0 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c6c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000c70:	08006fd8 	.word	0x08006fd8
  ldr  r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c78:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000c7c:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000c80:	20004a5c 	.word	0x20004a5c

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8d8 	bl	8000e66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff ff16 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fe4c 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000010 	.word	0x20000010
 8000cf0:	20004a18 	.word	0x20004a18

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20004a18 	.word	0x20004a18

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	; (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	; (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	; (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	; 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	; 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff4c 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8e:	f7ff ff61 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	6978      	ldr	r0, [r7, #20]
 8000e9a:	f7ff ffb1 	bl	8000e00 <NVIC_EncodePriority>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff80 	bl	8000dac <__NVIC_SetPriority>
}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff54 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d004      	beq.n	8000eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00c      	b.n	8000f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f022 0201 	bic.w	r2, r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f22:	b2db      	uxtb	r3, r3
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	e159      	b.n	8001200 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	f040 8148 	bne.w	80011fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d00b      	beq.n	8000f8a <HAL_GPIO_Init+0x5a>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f7e:	2b11      	cmp	r3, #17
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b12      	cmp	r3, #18
 8000f88:	d130      	bne.n	8000fec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	091b      	lsrs	r3, r3, #4
 8000fd6:	f003 0201 	and.w	r2, r3, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0xfc>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b12      	cmp	r3, #18
 800102a:	d123      	bne.n	8001074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	220f      	movs	r2, #15
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69b9      	ldr	r1, [r7, #24]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80a2 	beq.w	80011fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b56      	ldr	r3, [pc, #344]	; (8001214 <HAL_GPIO_Init+0x2e4>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a55      	ldr	r2, [pc, #340]	; (8001214 <HAL_GPIO_Init+0x2e4>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b53      	ldr	r3, [pc, #332]	; (8001214 <HAL_GPIO_Init+0x2e4>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d2:	4a51      	ldr	r2, [pc, #324]	; (8001218 <HAL_GPIO_Init+0x2e8>)
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a48      	ldr	r2, [pc, #288]	; (800121c <HAL_GPIO_Init+0x2ec>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x202>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a47      	ldr	r2, [pc, #284]	; (8001220 <HAL_GPIO_Init+0x2f0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x1fe>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a46      	ldr	r2, [pc, #280]	; (8001224 <HAL_GPIO_Init+0x2f4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x1fa>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a45      	ldr	r2, [pc, #276]	; (8001228 <HAL_GPIO_Init+0x2f8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x1f6>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a44      	ldr	r2, [pc, #272]	; (800122c <HAL_GPIO_Init+0x2fc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x1f2>
 800111e:	2304      	movs	r3, #4
 8001120:	e008      	b.n	8001134 <HAL_GPIO_Init+0x204>
 8001122:	2307      	movs	r3, #7
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x204>
 8001126:	2303      	movs	r3, #3
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x204>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x204>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x204>
 8001132:	2300      	movs	r3, #0
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	f002 0203 	and.w	r2, r2, #3
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	4093      	lsls	r3, r2
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001144:	4934      	ldr	r1, [pc, #208]	; (8001218 <HAL_GPIO_Init+0x2e8>)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3302      	adds	r3, #2
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001152:	4b37      	ldr	r3, [pc, #220]	; (8001230 <HAL_GPIO_Init+0x300>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001176:	4a2e      	ldr	r2, [pc, #184]	; (8001230 <HAL_GPIO_Init+0x300>)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_GPIO_Init+0x300>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a0:	4a23      	ldr	r2, [pc, #140]	; (8001230 <HAL_GPIO_Init+0x300>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <HAL_GPIO_Init+0x300>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ca:	4a19      	ldr	r2, [pc, #100]	; (8001230 <HAL_GPIO_Init+0x300>)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_GPIO_Init+0x300>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <HAL_GPIO_Init+0x300>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3301      	adds	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b0f      	cmp	r3, #15
 8001204:	f67f aea2 	bls.w	8000f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001208:	bf00      	nop
 800120a:	3724      	adds	r7, #36	; 0x24
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800
 8001218:	40013800 	.word	0x40013800
 800121c:	40020000 	.word	0x40020000
 8001220:	40020400 	.word	0x40020400
 8001224:	40020800 	.word	0x40020800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	40021000 	.word	0x40021000
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	807b      	strh	r3, [r7, #2]
 8001240:	4613      	mov	r3, r2
 8001242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001244:	787b      	ldrb	r3, [r7, #1]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001250:	e003      	b.n	800125a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	041a      	lsls	r2, r3, #16
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	619a      	str	r2, [r3, #24]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e11f      	b.n	80014ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d106      	bne.n	8001294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fb8a 	bl	80009a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2224      	movs	r2, #36	; 0x24
 8001298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012cc:	f002 fa6a 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 80012d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a7b      	ldr	r2, [pc, #492]	; (80014c4 <HAL_I2C_Init+0x25c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d807      	bhi.n	80012ec <HAL_I2C_Init+0x84>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4a7a      	ldr	r2, [pc, #488]	; (80014c8 <HAL_I2C_Init+0x260>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	bf94      	ite	ls
 80012e4:	2301      	movls	r3, #1
 80012e6:	2300      	movhi	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	e006      	b.n	80012fa <HAL_I2C_Init+0x92>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4a77      	ldr	r2, [pc, #476]	; (80014cc <HAL_I2C_Init+0x264>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	bf94      	ite	ls
 80012f4:	2301      	movls	r3, #1
 80012f6:	2300      	movhi	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e0db      	b.n	80014ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4a72      	ldr	r2, [pc, #456]	; (80014d0 <HAL_I2C_Init+0x268>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9b      	lsrs	r3, r3, #18
 800130c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	430a      	orrs	r2, r1
 8001320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a64      	ldr	r2, [pc, #400]	; (80014c4 <HAL_I2C_Init+0x25c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d802      	bhi.n	800133c <HAL_I2C_Init+0xd4>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	3301      	adds	r3, #1
 800133a:	e009      	b.n	8001350 <HAL_I2C_Init+0xe8>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	4a63      	ldr	r2, [pc, #396]	; (80014d4 <HAL_I2C_Init+0x26c>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	099b      	lsrs	r3, r3, #6
 800134e:	3301      	adds	r3, #1
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	430b      	orrs	r3, r1
 8001356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4956      	ldr	r1, [pc, #344]	; (80014c4 <HAL_I2C_Init+0x25c>)
 800136c:	428b      	cmp	r3, r1
 800136e:	d80d      	bhi.n	800138c <HAL_I2C_Init+0x124>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1e59      	subs	r1, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fbb1 f3f3 	udiv	r3, r1, r3
 800137e:	3301      	adds	r3, #1
 8001380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	bf38      	it	cc
 8001388:	2304      	movcc	r3, #4
 800138a:	e04f      	b.n	800142c <HAL_I2C_Init+0x1c4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d111      	bne.n	80013b8 <HAL_I2C_Init+0x150>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1e58      	subs	r0, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	440b      	add	r3, r1
 80013a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80013a6:	3301      	adds	r3, #1
 80013a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	e012      	b.n	80013de <HAL_I2C_Init+0x176>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1e58      	subs	r0, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	0099      	lsls	r1, r3, #2
 80013c8:	440b      	add	r3, r1
 80013ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ce:	3301      	adds	r3, #1
 80013d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf0c      	ite	eq
 80013d8:	2301      	moveq	r3, #1
 80013da:	2300      	movne	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_Init+0x17e>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e022      	b.n	800142c <HAL_I2C_Init+0x1c4>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10e      	bne.n	800140c <HAL_I2C_Init+0x1a4>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	1e58      	subs	r0, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6859      	ldr	r1, [r3, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	440b      	add	r3, r1
 80013fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001400:	3301      	adds	r3, #1
 8001402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140a:	e00f      	b.n	800142c <HAL_I2C_Init+0x1c4>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1e58      	subs	r0, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6859      	ldr	r1, [r3, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	0099      	lsls	r1, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001422:	3301      	adds	r3, #1
 8001424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	6809      	ldr	r1, [r1, #0]
 8001430:	4313      	orrs	r3, r2
 8001432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800145a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6911      	ldr	r1, [r2, #16]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68d2      	ldr	r2, [r2, #12]
 8001466:	4311      	orrs	r1, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	430b      	orrs	r3, r1
 800146e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695a      	ldr	r2, [r3, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0201 	orr.w	r2, r2, #1
 800149a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2220      	movs	r2, #32
 80014a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	000186a0 	.word	0x000186a0
 80014c8:	001e847f 	.word	0x001e847f
 80014cc:	003d08ff 	.word	0x003d08ff
 80014d0:	431bde83 	.word	0x431bde83
 80014d4:	10624dd3 	.word	0x10624dd3

080014d8 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	4613      	mov	r3, r2
 80014e4:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d158      	bne.n	80015a4 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <HAL_I2C_Slave_Receive_IT+0x26>
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e051      	b.n	80015a6 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_I2C_Slave_Receive_IT+0x38>
 800150c:	2302      	movs	r3, #2
 800150e:	e04a      	b.n	80015a6 <HAL_I2C_Slave_Receive_IT+0xce>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b01      	cmp	r3, #1
 8001524:	d007      	beq.n	8001536 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f042 0201 	orr.w	r2, r2, #1
 8001534:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001544:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2222      	movs	r2, #34	; 0x22
 800154a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2220      	movs	r2, #32
 8001552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	68ba      	ldr	r2, [r7, #8]
 8001560:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001586:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800159e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e000      	b.n	80015a6 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80015a4:	2302      	movs	r3, #2
  }
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	ffff0000 	.word	0xffff0000

080015b8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b20      	cmp	r3, #32
 80015ca:	d124      	bne.n	8001616 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2228      	movs	r2, #40	; 0x28
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d007      	beq.n	80015f2 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001600:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001610:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001616:	2302      	movs	r3, #2
  }
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001644:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800164c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b10      	cmp	r3, #16
 8001652:	d003      	beq.n	800165c <HAL_I2C_EV_IRQHandler+0x38>
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	2b40      	cmp	r3, #64	; 0x40
 8001658:	f040 80bd 	bne.w	80017d6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10d      	bne.n	8001692 <HAL_I2C_EV_IRQHandler+0x6e>
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800167c:	d003      	beq.n	8001686 <HAL_I2C_EV_IRQHandler+0x62>
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001684:	d101      	bne.n	800168a <HAL_I2C_EV_IRQHandler+0x66>
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_I2C_EV_IRQHandler+0x68>
 800168a:	2300      	movs	r3, #0
 800168c:	2b01      	cmp	r3, #1
 800168e:	f000 812e 	beq.w	80018ee <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00c      	beq.n	80016b6 <HAL_I2C_EV_IRQHandler+0x92>
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	0a5b      	lsrs	r3, r3, #9
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f001 fc4b 	bl	8002f44 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fd58 	bl	8002164 <I2C_Master_SB>
 80016b4:	e08e      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_I2C_EV_IRQHandler+0xb2>
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	0a5b      	lsrs	r3, r3, #9
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fdce 	bl	8002270 <I2C_Master_ADD10>
 80016d4:	e07e      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	085b      	lsrs	r3, r3, #1
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <HAL_I2C_EV_IRQHandler+0xd2>
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	0a5b      	lsrs	r3, r3, #9
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 fde8 	bl	80022c4 <I2C_Master_ADDR>
 80016f4:	e06e      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d037      	beq.n	8001772 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001710:	f000 80ef 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	09db      	lsrs	r3, r3, #7
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00f      	beq.n	8001740 <HAL_I2C_EV_IRQHandler+0x11c>
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	0a9b      	lsrs	r3, r3, #10
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d009      	beq.n	8001740 <HAL_I2C_EV_IRQHandler+0x11c>
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d103      	bne.n	8001740 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 f9e5 	bl	8001b08 <I2C_MasterTransmit_TXE>
 800173e:	e049      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80d2 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	0a5b      	lsrs	r3, r3, #9
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 80cb 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b10      	cmp	r3, #16
 8001760:	d103      	bne.n	800176a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fa6c 	bl	8001c40 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001768:	e0c3      	b.n	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fad0 	bl	8001d10 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001770:	e0bf      	b.n	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800177c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001780:	f000 80b7 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00f      	beq.n	80017b0 <HAL_I2C_EV_IRQHandler+0x18c>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	0a9b      	lsrs	r3, r3, #10
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <HAL_I2C_EV_IRQHandler+0x18c>
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	089b      	lsrs	r3, r3, #2
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d103      	bne.n	80017b0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fb40 	bl	8001e2e <I2C_MasterReceive_RXNE>
 80017ae:	e011      	b.n	80017d4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 809a 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	0a5b      	lsrs	r3, r3, #9
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8093 	beq.w	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fbdf 	bl	8001f90 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017d2:	e08e      	b.n	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
 80017d4:	e08d      	b.n	80018f2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	e007      	b.n	80017f8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	d012      	beq.n	800182a <HAL_I2C_EV_IRQHandler+0x206>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	0a5b      	lsrs	r3, r3, #9
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00c      	beq.n	800182a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 ff9d 	bl	8002762 <I2C_Slave_ADDR>
 8001828:	e066      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_I2C_EV_IRQHandler+0x226>
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	0a5b      	lsrs	r3, r3, #9
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 ffd2 	bl	80027ec <I2C_Slave_STOPF>
 8001848:	e056      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	2b21      	cmp	r3, #33	; 0x21
 800184e:	d002      	beq.n	8001856 <HAL_I2C_EV_IRQHandler+0x232>
 8001850:	7bbb      	ldrb	r3, [r7, #14]
 8001852:	2b29      	cmp	r3, #41	; 0x29
 8001854:	d125      	bne.n	80018a2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	09db      	lsrs	r3, r3, #7
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00f      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x25e>
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	0a9b      	lsrs	r3, r3, #10
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d009      	beq.n	8001882 <HAL_I2C_EV_IRQHandler+0x25e>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d103      	bne.n	8001882 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 feb3 	bl	80025e6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001880:	e039      	b.n	80018f6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d033      	beq.n	80018f6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	0a5b      	lsrs	r3, r3, #9
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d02d      	beq.n	80018f6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fee0 	bl	8002660 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018a0:	e029      	b.n	80018f6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	099b      	lsrs	r3, r3, #6
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00f      	beq.n	80018ce <HAL_I2C_EV_IRQHandler+0x2aa>
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	0a9b      	lsrs	r3, r3, #10
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_I2C_EV_IRQHandler+0x2aa>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	089b      	lsrs	r3, r3, #2
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d103      	bne.n	80018ce <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 feeb 	bl	80026a2 <I2C_SlaveReceive_RXNE>
 80018cc:	e014      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00e      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2d4>
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	0a5b      	lsrs	r3, r3, #9
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 ff19 	bl	800271e <I2C_SlaveReceive_BTF>
 80018ec:	e004      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80018ee:	bf00      	nop
 80018f0:	e002      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018f2:	bf00      	nop
 80018f4:	e000      	b.n	80018f8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b08a      	sub	sp, #40	; 0x28
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001920:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00e      	beq.n	800194c <HAL_I2C_ER_IRQHandler+0x4e>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800194a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	0a5b      	lsrs	r3, r3, #9
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00e      	beq.n	8001976 <HAL_I2C_ER_IRQHandler+0x78>
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	f043 0302 	orr.w	r3, r3, #2
 800196a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001974:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	0a9b      	lsrs	r3, r3, #10
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d03f      	beq.n	8001a02 <HAL_I2C_ER_IRQHandler+0x104>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d039      	beq.n	8001a02 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800198e:	7efb      	ldrb	r3, [r7, #27]
 8001990:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29b      	uxth	r3, r3
 8001998:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80019a8:	7ebb      	ldrb	r3, [r7, #26]
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d112      	bne.n	80019d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10f      	bne.n	80019d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80019b4:	7cfb      	ldrb	r3, [r7, #19]
 80019b6:	2b21      	cmp	r3, #33	; 0x21
 80019b8:	d008      	beq.n	80019cc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80019ba:	7cfb      	ldrb	r3, [r7, #19]
 80019bc:	2b29      	cmp	r3, #41	; 0x29
 80019be:	d005      	beq.n	80019cc <HAL_I2C_ER_IRQHandler+0xce>
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b28      	cmp	r3, #40	; 0x28
 80019c4:	d106      	bne.n	80019d4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b21      	cmp	r3, #33	; 0x21
 80019ca:	d103      	bne.n	80019d4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f001 f83d 	bl	8002a4c <I2C_Slave_AF>
 80019d2:	e016      	b.n	8001a02 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019dc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80019e6:	7efb      	ldrb	r3, [r7, #27]
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d002      	beq.n	80019f2 <HAL_I2C_ER_IRQHandler+0xf4>
 80019ec:	7efb      	ldrb	r3, [r7, #27]
 80019ee:	2b40      	cmp	r3, #64	; 0x40
 80019f0:	d107      	bne.n	8001a02 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a00:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	0adb      	lsrs	r3, r3, #11
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00e      	beq.n	8001a2c <HAL_I2C_ER_IRQHandler+0x12e>
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001a2a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d008      	beq.n	8001a44 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f001 f874 	bl	8002b2c <I2C_ITError>
  }
}
 8001a44:	bf00      	nop
 8001a46:	3728      	adds	r7, #40	; 0x28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001afa:	b2db      	uxtb	r3, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d150      	bne.n	8001bd0 <I2C_MasterTransmit_TXE+0xc8>
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	2b21      	cmp	r3, #33	; 0x21
 8001b32:	d14d      	bne.n	8001bd0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d01d      	beq.n	8001b76 <I2C_MasterTransmit_TXE+0x6e>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d01a      	beq.n	8001b76 <I2C_MasterTransmit_TXE+0x6e>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b46:	d016      	beq.n	8001b76 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b56:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2211      	movs	r2, #17
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff6c 	bl	8001a4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b74:	e060      	b.n	8001c38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b84:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b94:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b40      	cmp	r3, #64	; 0x40
 8001bae:	d107      	bne.n	8001bc0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff6f 	bl	8001a9c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bbe:	e03b      	b.n	8001c38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff ff3f 	bl	8001a4c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001bce:	e033      	b.n	8001c38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	2b21      	cmp	r3, #33	; 0x21
 8001bd4:	d005      	beq.n	8001be2 <I2C_MasterTransmit_TXE+0xda>
 8001bd6:	7bbb      	ldrb	r3, [r7, #14]
 8001bd8:	2b40      	cmp	r3, #64	; 0x40
 8001bda:	d12d      	bne.n	8001c38 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b22      	cmp	r3, #34	; 0x22
 8001be0:	d12a      	bne.n	8001c38 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d108      	bne.n	8001bfe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001bfc:	e01c      	b.n	8001c38 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b40      	cmp	r3, #64	; 0x40
 8001c08:	d103      	bne.n	8001c12 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f880 	bl	8001d10 <I2C_MemoryTransmit_TXE_BTF>
}
 8001c10:	e012      	b.n	8001c38 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	781a      	ldrb	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001c36:	e7ff      	b.n	8001c38 <I2C_MasterTransmit_TXE+0x130>
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b21      	cmp	r3, #33	; 0x21
 8001c58:	d156      	bne.n	8001d08 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d012      	beq.n	8001c8a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001c88:	e03e      	b.n	8001d08 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d01d      	beq.n	8001ccc <I2C_MasterTransmit_BTF+0x8c>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d01a      	beq.n	8001ccc <I2C_MasterTransmit_BTF+0x8c>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c9c:	d016      	beq.n	8001ccc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2211      	movs	r2, #17
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fec1 	bl	8001a4c <HAL_I2C_MasterTxCpltCallback>
}
 8001cca:	e01d      	b.n	8001d08 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cda:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fea2 	bl	8001a4c <HAL_I2C_MasterTxCpltCallback>
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d11d      	bne.n	8001d64 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10b      	bne.n	8001d48 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d40:	1c9a      	adds	r2, r3, #2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001d46:	e06e      	b.n	8001e26 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	121b      	asrs	r3, r3, #8
 8001d50:	b2da      	uxtb	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d62:	e060      	b.n	8001e26 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d10b      	bne.n	8001d84 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001d82:	e050      	b.n	8001e26 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d14c      	bne.n	8001e26 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b22      	cmp	r3, #34	; 0x22
 8001d90:	d108      	bne.n	8001da4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	e040      	b.n	8001e26 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d015      	beq.n	8001dda <I2C_MemoryTransmit_TXE_BTF+0xca>
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	2b21      	cmp	r3, #33	; 0x21
 8001db2:	d112      	bne.n	8001dda <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	781a      	ldrb	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001dd8:	e025      	b.n	8001e26 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d120      	bne.n	8001e26 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b21      	cmp	r3, #33	; 0x21
 8001de8:	d11d      	bne.n	8001e26 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001df8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e08:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff fe3b 	bl	8001a9c <HAL_I2C_MemTxCpltCallback>
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b084      	sub	sp, #16
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b22      	cmp	r3, #34	; 0x22
 8001e40:	f040 80a2 	bne.w	8001f88 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d921      	bls.n	8001e96 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	f040 8082 	bne.w	8001f88 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e92:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001e94:	e078      	b.n	8001f88 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d074      	beq.n	8001f88 <I2C_MasterReceive_RXNE+0x15a>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d002      	beq.n	8001eaa <I2C_MasterReceive_RXNE+0x7c>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d16e      	bne.n	8001f88 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f001 f818 	bl	8002ee0 <I2C_WaitOnSTOPRequestThroughIT>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d142      	bne.n	8001f3c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ed4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b40      	cmp	r3, #64	; 0x40
 8001f0e:	d10a      	bne.n	8001f26 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fdc6 	bl	8001ab0 <HAL_I2C_MemRxCpltCallback>
}
 8001f24:	e030      	b.n	8001f88 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2212      	movs	r2, #18
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff fd93 	bl	8001a60 <HAL_I2C_MasterRxCpltCallback>
}
 8001f3a:	e025      	b.n	8001f88 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f4a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fd9e 	bl	8001ac4 <HAL_I2C_ErrorCallback>
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d11b      	bne.n	8001fe0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001fde:	e0bd      	b.n	800215c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d129      	bne.n	800203e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d00a      	beq.n	8002016 <I2C_MasterReceive_BTF+0x86>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d007      	beq.n	8002016 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002014:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800203c:	e08e      	b.n	800215c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002042:	b29b      	uxth	r3, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d176      	bne.n	8002136 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d002      	beq.n	8002054 <I2C_MasterReceive_BTF+0xc4>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b10      	cmp	r3, #16
 8002052:	d108      	bne.n	8002066 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e019      	b.n	800209a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b04      	cmp	r3, #4
 800206a:	d002      	beq.n	8002072 <I2C_MasterReceive_BTF+0xe2>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d108      	bne.n	8002084 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	e00a      	b.n	800209a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b10      	cmp	r3, #16
 8002088:	d007      	beq.n	800209a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002098:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020dc:	b29b      	uxth	r3, r3
 80020de:	3b01      	subs	r3, #1
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80020f4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	d10a      	bne.n	8002120 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fcc9 	bl	8001ab0 <HAL_I2C_MemRxCpltCallback>
}
 800211e:	e01d      	b.n	800215c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2212      	movs	r2, #18
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fc96 	bl	8001a60 <HAL_I2C_MasterRxCpltCallback>
}
 8002134:	e012      	b.n	800215c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b40      	cmp	r3, #64	; 0x40
 8002176:	d117      	bne.n	80021a8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002190:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002192:	e067      	b.n	8002264 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	b2db      	uxtb	r3, r3
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	611a      	str	r2, [r3, #16]
}
 80021a6:	e05d      	b.n	8002264 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021b0:	d133      	bne.n	800221a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b21      	cmp	r3, #33	; 0x21
 80021bc:	d109      	bne.n	80021d2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	e008      	b.n	80021e4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f043 0301 	orr.w	r3, r3, #1
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d004      	beq.n	80021f6 <I2C_Master_SB+0x92>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d108      	bne.n	8002208 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d032      	beq.n	8002264 <I2C_Master_SB+0x100>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	2b00      	cmp	r3, #0
 8002206:	d02d      	beq.n	8002264 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002216:	605a      	str	r2, [r3, #4]
}
 8002218:	e024      	b.n	8002264 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10e      	bne.n	8002240 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	b29b      	uxth	r3, r3
 8002228:	11db      	asrs	r3, r3, #7
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f003 0306 	and.w	r3, r3, #6
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f063 030f 	orn	r3, r3, #15
 8002236:	b2da      	uxtb	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	611a      	str	r2, [r3, #16]
}
 800223e:	e011      	b.n	8002264 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002244:	2b01      	cmp	r3, #1
 8002246:	d10d      	bne.n	8002264 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	b29b      	uxth	r3, r3
 800224e:	11db      	asrs	r3, r3, #7
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 0306 	and.w	r3, r3, #6
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f063 030e 	orn	r3, r3, #14
 800225c:	b2da      	uxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	611a      	str	r2, [r3, #16]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	b2da      	uxtb	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <I2C_Master_ADD10+0x24>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	2b00      	cmp	r3, #0
 8002292:	d011      	beq.n	80022b8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d104      	bne.n	80022a8 <I2C_Master_ADD10+0x38>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b6:	605a      	str	r2, [r3, #4]
    }
  }
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b091      	sub	sp, #68	; 0x44
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b22      	cmp	r3, #34	; 0x22
 80022ec:	f040 8169 	bne.w	80025c2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10f      	bne.n	8002318 <I2C_Master_ADDR+0x54>
 80022f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80022fc:	2b40      	cmp	r3, #64	; 0x40
 80022fe:	d10b      	bne.n	8002318 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002300:	2300      	movs	r3, #0
 8002302:	633b      	str	r3, [r7, #48]	; 0x30
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	633b      	str	r3, [r7, #48]	; 0x30
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	e160      	b.n	80025da <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231c:	2b00      	cmp	r3, #0
 800231e:	d11d      	bne.n	800235c <I2C_Master_ADDR+0x98>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002328:	d118      	bne.n	800235c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232a:	2300      	movs	r3, #0
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	651a      	str	r2, [r3, #80]	; 0x50
 800235a:	e13e      	b.n	80025da <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d113      	bne.n	800238e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002366:	2300      	movs	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	; 0x28
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
 800237a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	e115      	b.n	80025ba <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	f040 808a 	bne.w	80024ae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023a0:	d137      	bne.n	8002412 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c0:	d113      	bne.n	80023ea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	e0e7      	b.n	80025ba <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e0d3      	b.n	80025ba <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002414:	2b08      	cmp	r3, #8
 8002416:	d02e      	beq.n	8002476 <I2C_Master_ADDR+0x1b2>
 8002418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241a:	2b20      	cmp	r3, #32
 800241c:	d02b      	beq.n	8002476 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002420:	2b12      	cmp	r3, #18
 8002422:	d102      	bne.n	800242a <I2C_Master_ADDR+0x166>
 8002424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002426:	2b01      	cmp	r3, #1
 8002428:	d125      	bne.n	8002476 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	2b04      	cmp	r3, #4
 800242e:	d00e      	beq.n	800244e <I2C_Master_ADDR+0x18a>
 8002430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002432:	2b02      	cmp	r3, #2
 8002434:	d00b      	beq.n	800244e <I2C_Master_ADDR+0x18a>
 8002436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002438:	2b10      	cmp	r3, #16
 800243a:	d008      	beq.n	800244e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e007      	b.n	800245e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800245c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	e0a1      	b.n	80025ba <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002484:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e085      	b.n	80025ba <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d14d      	bne.n	8002554 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d016      	beq.n	80024ec <I2C_Master_ADDR+0x228>
 80024be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d013      	beq.n	80024ec <I2C_Master_ADDR+0x228>
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d010      	beq.n	80024ec <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e007      	b.n	80024fc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024fa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800250a:	d117      	bne.n	800253c <I2C_Master_ADDR+0x278>
 800250c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002512:	d00b      	beq.n	800252c <I2C_Master_ADDR+0x268>
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	2b01      	cmp	r3, #1
 8002518:	d008      	beq.n	800252c <I2C_Master_ADDR+0x268>
 800251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251c:	2b08      	cmp	r3, #8
 800251e:	d005      	beq.n	800252c <I2C_Master_ADDR+0x268>
 8002520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002522:	2b10      	cmp	r3, #16
 8002524:	d002      	beq.n	800252c <I2C_Master_ADDR+0x268>
 8002526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002528:	2b20      	cmp	r3, #32
 800252a:	d107      	bne.n	800253c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800253a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	e032      	b.n	80025ba <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002562:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800256e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002572:	d117      	bne.n	80025a4 <I2C_Master_ADDR+0x2e0>
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800257a:	d00b      	beq.n	8002594 <I2C_Master_ADDR+0x2d0>
 800257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257e:	2b01      	cmp	r3, #1
 8002580:	d008      	beq.n	8002594 <I2C_Master_ADDR+0x2d0>
 8002582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002584:	2b08      	cmp	r3, #8
 8002586:	d005      	beq.n	8002594 <I2C_Master_ADDR+0x2d0>
 8002588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258a:	2b10      	cmp	r3, #16
 800258c:	d002      	beq.n	8002594 <I2C_Master_ADDR+0x2d0>
 800258e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002590:	2b20      	cmp	r3, #32
 8002592:	d107      	bne.n	80025a4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80025c0:	e00b      	b.n	80025da <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	e7ff      	b.n	80025da <I2C_Master_ADDR+0x316>
 80025da:	bf00      	nop
 80025dc:	3744      	adds	r7, #68	; 0x44
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d02b      	beq.n	8002658 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	1c5a      	adds	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d114      	bne.n	8002658 <I2C_SlaveTransmit_TXE+0x72>
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b29      	cmp	r3, #41	; 0x29
 8002632:	d111      	bne.n	8002658 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002642:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2221      	movs	r2, #33	; 0x21
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2228      	movs	r2, #40	; 0x28
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff fa0e 	bl	8001a74 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d011      	beq.n	8002696 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	781a      	ldrb	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b084      	sub	sp, #16
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02c      	beq.n	8002716 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d114      	bne.n	8002716 <I2C_SlaveReceive_RXNE+0x74>
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b2a      	cmp	r3, #42	; 0x2a
 80026f0:	d111      	bne.n	8002716 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002700:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2222      	movs	r2, #34	; 0x22
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2228      	movs	r2, #40	; 0x28
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff f9b9 	bl	8001a88 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d012      	beq.n	8002756 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800277c:	2b28      	cmp	r3, #40	; 0x28
 800277e:	d127      	bne.n	80027d0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	09db      	lsrs	r3, r3, #7
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	81bb      	strh	r3, [r7, #12]
 80027b2:	e002      	b.n	80027ba <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80027c2:	89ba      	ldrh	r2, [r7, #12]
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7fe f842 	bl	8000852 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80027ce:	e008      	b.n	80027e2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0202 	mvn.w	r2, #2
 80027d8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800280a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002838:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002848:	d172      	bne.n	8002930 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b22      	cmp	r3, #34	; 0x22
 800284e:	d002      	beq.n	8002856 <I2C_Slave_STOPF+0x6a>
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	2b2a      	cmp	r3, #42	; 0x2a
 8002854:	d135      	bne.n	80028c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	b29a      	uxth	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f043 0204 	orr.w	r2, r3, #4
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002888:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fb40 	bl	8000f14 <HAL_DMA_GetState>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d049      	beq.n	800292e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	4a69      	ldr	r2, [pc, #420]	; (8002a44 <I2C_Slave_STOPF+0x258>)
 80028a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fb12 	bl	8000ed0 <HAL_DMA_Abort_IT>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d03d      	beq.n	800292e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028bc:	4610      	mov	r0, r2
 80028be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028c0:	e035      	b.n	800292e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d005      	beq.n	80028e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f043 0204 	orr.w	r2, r3, #4
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fe fb0a 	bl	8000f14 <HAL_DMA_GetState>
 8002900:	4603      	mov	r3, r0
 8002902:	2b01      	cmp	r3, #1
 8002904:	d014      	beq.n	8002930 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290a:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <I2C_Slave_STOPF+0x258>)
 800290c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fadc 	bl	8000ed0 <HAL_DMA_Abort_IT>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002928:	4610      	mov	r0, r2
 800292a:	4798      	blx	r3
 800292c:	e000      	b.n	8002930 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800292e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d03e      	beq.n	80029b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b04      	cmp	r3, #4
 8002946:	d112      	bne.n	800296e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	3b01      	subs	r3, #1
 8002968:	b29a      	uxth	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d112      	bne.n	80029a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f043 0204 	orr.w	r2, r3, #4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f8b3 	bl	8002b2c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80029c6:	e039      	b.n	8002a3c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b2a      	cmp	r3, #42	; 0x2a
 80029cc:	d109      	bne.n	80029e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2228      	movs	r2, #40	; 0x28
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff f853 	bl	8001a88 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b28      	cmp	r3, #40	; 0x28
 80029ec:	d111      	bne.n	8002a12 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <I2C_Slave_STOPF+0x25c>)
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fd ff16 	bl	800083c <HAL_I2C_ListenCpltCallback>
}
 8002a10:	e014      	b.n	8002a3c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	2b22      	cmp	r3, #34	; 0x22
 8002a18:	d002      	beq.n	8002a20 <I2C_Slave_STOPF+0x234>
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b22      	cmp	r3, #34	; 0x22
 8002a1e:	d10d      	bne.n	8002a3c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff f826 	bl	8001a88 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	08002d91 	.word	0x08002d91
 8002a48:	ffff0000 	.word	0xffff0000

08002a4c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a60:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d002      	beq.n	8002a6e <I2C_Slave_AF+0x22>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d129      	bne.n	8002ac2 <I2C_Slave_AF+0x76>
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b28      	cmp	r3, #40	; 0x28
 8002a72:	d126      	bne.n	8002ac2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <I2C_Slave_AF+0xdc>)
 8002a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a88:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a92:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fd febe 	bl	800083c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002ac0:	e02e      	b.n	8002b20 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b21      	cmp	r3, #33	; 0x21
 8002ac6:	d126      	bne.n	8002b16 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <I2C_Slave_AF+0xdc>)
 8002acc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2221      	movs	r2, #33	; 0x21
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002af2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002afc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe ffb0 	bl	8001a74 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b14:	e004      	b.n	8002b20 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b1e:	615a      	str	r2, [r3, #20]
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	ffff0000 	.word	0xffff0000

08002b2c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b42:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b44:	7bbb      	ldrb	r3, [r7, #14]
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d002      	beq.n	8002b50 <I2C_ITError+0x24>
 8002b4a:	7bbb      	ldrb	r3, [r7, #14]
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d10a      	bne.n	8002b66 <I2C_ITError+0x3a>
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b22      	cmp	r3, #34	; 0x22
 8002b54:	d107      	bne.n	8002b66 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b64:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b6c:	2b28      	cmp	r3, #40	; 0x28
 8002b6e:	d107      	bne.n	8002b80 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2228      	movs	r2, #40	; 0x28
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002b7e:	e015      	b.n	8002bac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b8e:	d00a      	beq.n	8002ba6 <I2C_ITError+0x7a>
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b60      	cmp	r3, #96	; 0x60
 8002b94:	d007      	beq.n	8002ba6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bba:	d162      	bne.n	8002c82 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d020      	beq.n	8002c1c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bde:	4a6a      	ldr	r2, [pc, #424]	; (8002d88 <I2C_ITError+0x25c>)
 8002be0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f972 	bl	8000ed0 <HAL_DMA_Abort_IT>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8089 	beq.w	8002d06 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c16:	4610      	mov	r0, r2
 8002c18:	4798      	blx	r3
 8002c1a:	e074      	b.n	8002d06 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	4a59      	ldr	r2, [pc, #356]	; (8002d88 <I2C_ITError+0x25c>)
 8002c22:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fe f951 	bl	8000ed0 <HAL_DMA_Abort_IT>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d068      	beq.n	8002d06 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3e:	2b40      	cmp	r3, #64	; 0x40
 8002c40:	d10b      	bne.n	8002c5a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4798      	blx	r3
 8002c80:	e041      	b.n	8002d06 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b60      	cmp	r3, #96	; 0x60
 8002c8c:	d125      	bne.n	8002cda <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d10b      	bne.n	8002cc2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe ff00 	bl	8001ad8 <HAL_I2C_AbortCpltCallback>
 8002cd8:	e015      	b.n	8002d06 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d10b      	bne.n	8002d00 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7fe fedf 	bl	8001ac4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10e      	bne.n	8002d34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d42:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d113      	bne.n	8002d80 <I2C_ITError+0x254>
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	2b28      	cmp	r3, #40	; 0x28
 8002d5c:	d110      	bne.n	8002d80 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <I2C_ITError+0x260>)
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fd5e 	bl	800083c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	08002d91 	.word	0x08002d91
 8002d8c:	ffff0000 	.word	0xffff0000

08002d90 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002daa:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <I2C_DMAAbort+0x148>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	08db      	lsrs	r3, r3, #3
 8002db0:	4a4a      	ldr	r2, [pc, #296]	; (8002edc <I2C_DMAAbort+0x14c>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0a1a      	lsrs	r2, r3, #8
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00da      	lsls	r2, r3, #3
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f043 0220 	orr.w	r2, r3, #32
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002dd6:	e00a      	b.n	8002dee <I2C_DMAAbort+0x5e>
    }
    count--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dec:	d0ea      	beq.n	8002dc4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2200      	movs	r2, #0
 8002e22:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	2200      	movs	r2, #0
 8002e32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	2200      	movs	r2, #0
 8002e42:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b60      	cmp	r3, #96	; 0x60
 8002e5e:	d10e      	bne.n	8002e7e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2200      	movs	r2, #0
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e76:	6978      	ldr	r0, [r7, #20]
 8002e78:	f7fe fe2e 	bl	8001ad8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e7c:	e027      	b.n	8002ece <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e7e:	7cfb      	ldrb	r3, [r7, #19]
 8002e80:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e84:	2b28      	cmp	r3, #40	; 0x28
 8002e86:	d117      	bne.n	8002eb8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ea6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2228      	movs	r2, #40	; 0x28
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002eb6:	e007      	b.n	8002ec8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ec8:	6978      	ldr	r0, [r7, #20]
 8002eca:	f7fe fdfb 	bl	8001ac4 <HAL_I2C_ErrorCallback>
}
 8002ece:	bf00      	nop
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000008 	.word	0x20000008
 8002edc:	14f8b589 	.word	0x14f8b589

08002ee0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002eec:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	4a13      	ldr	r2, [pc, #76]	; (8002f40 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0a1a      	lsrs	r2, r3, #8
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d107      	bne.n	8002f1e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f043 0220 	orr.w	r2, r3, #32
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e008      	b.n	8002f30 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2c:	d0e9      	beq.n	8002f02 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	20000008 	.word	0x20000008
 8002f40:	14f8b589 	.word	0x14f8b589

08002f44 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f54:	d103      	bne.n	8002f5e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f5c:	e007      	b.n	8002f6e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f62:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f66:	d102      	bne.n	8002f6e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
	...

08002f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e25b      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d075      	beq.n	8003086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f9a:	4ba3      	ldr	r3, [pc, #652]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 030c 	and.w	r3, r3, #12
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fa6:	4ba0      	ldr	r3, [pc, #640]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d112      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb2:	4b9d      	ldr	r3, [pc, #628]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	4b99      	ldr	r3, [pc, #612]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d05b      	beq.n	8003084 <HAL_RCC_OscConfig+0x108>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d157      	bne.n	8003084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e236      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d106      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x74>
 8002fe2:	4b91      	ldr	r3, [pc, #580]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a90      	ldr	r2, [pc, #576]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e01d      	b.n	800302c <HAL_RCC_OscConfig+0xb0>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x98>
 8002ffa:	4b8b      	ldr	r3, [pc, #556]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a8a      	ldr	r2, [pc, #552]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a87      	ldr	r2, [pc, #540]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e00b      	b.n	800302c <HAL_RCC_OscConfig+0xb0>
 8003014:	4b84      	ldr	r3, [pc, #528]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a83      	ldr	r2, [pc, #524]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800301a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b81      	ldr	r3, [pc, #516]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a80      	ldr	r2, [pc, #512]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d013      	beq.n	800305c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd fe5e 	bl	8000cf4 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800303c:	f7fd fe5a 	bl	8000cf4 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b64      	cmp	r3, #100	; 0x64
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e1fb      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304e:	4b76      	ldr	r3, [pc, #472]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0xc0>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fd fe4a 	bl	8000cf4 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7fd fe46 	bl	8000cf4 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1e7      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003076:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0xe8>
 8003082:	e000      	b.n	8003086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d063      	beq.n	800315a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800309e:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d11c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d116      	bne.n	80030e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	4b5c      	ldr	r3, [pc, #368]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_RCC_OscConfig+0x152>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e1bb      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ce:	4b56      	ldr	r3, [pc, #344]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4952      	ldr	r1, [pc, #328]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e2:	e03a      	b.n	800315a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ec:	4b4f      	ldr	r3, [pc, #316]	; (800322c <HAL_RCC_OscConfig+0x2b0>)
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fd fdff 	bl	8000cf4 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fd fdfb 	bl	8000cf4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e19c      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310c:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4940      	ldr	r1, [pc, #256]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
 800312c:	e015      	b.n	800315a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_RCC_OscConfig+0x2b0>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fd fdde 	bl	8000cf4 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800313c:	f7fd fdda 	bl	8000cf4 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e17b      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314e:	4b36      	ldr	r3, [pc, #216]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d030      	beq.n	80031c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d016      	beq.n	800319c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800316e:	4b30      	ldr	r3, [pc, #192]	; (8003230 <HAL_RCC_OscConfig+0x2b4>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fd fdbe 	bl	8000cf4 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317c:	f7fd fdba 	bl	8000cf4 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e15b      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0x200>
 800319a:	e015      	b.n	80031c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCC_OscConfig+0x2b4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a2:	f7fd fda7 	bl	8000cf4 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fd fda3 	bl	8000cf4 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e144      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031bc:	4b1a      	ldr	r3, [pc, #104]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80a0 	beq.w	8003316 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003206:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_OscConfig+0x2b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320e:	2b00      	cmp	r3, #0
 8003210:	d121      	bne.n	8003256 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_RCC_OscConfig+0x2b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800321e:	f7fd fd69 	bl	8000cf4 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003224:	e011      	b.n	800324a <HAL_RCC_OscConfig+0x2ce>
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	42470000 	.word	0x42470000
 8003230:	42470e80 	.word	0x42470e80
 8003234:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003238:	f7fd fd5c 	bl	8000cf4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e0fd      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324a:	4b81      	ldr	r3, [pc, #516]	; (8003450 <HAL_RCC_OscConfig+0x4d4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d106      	bne.n	800326c <HAL_RCC_OscConfig+0x2f0>
 800325e:	4b7d      	ldr	r3, [pc, #500]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003262:	4a7c      	ldr	r2, [pc, #496]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6713      	str	r3, [r2, #112]	; 0x70
 800326a:	e01c      	b.n	80032a6 <HAL_RCC_OscConfig+0x32a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b05      	cmp	r3, #5
 8003272:	d10c      	bne.n	800328e <HAL_RCC_OscConfig+0x312>
 8003274:	4b77      	ldr	r3, [pc, #476]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a76      	ldr	r2, [pc, #472]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 800327a:	f043 0304 	orr.w	r3, r3, #4
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	4b74      	ldr	r3, [pc, #464]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a73      	ldr	r2, [pc, #460]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
 800328c:	e00b      	b.n	80032a6 <HAL_RCC_OscConfig+0x32a>
 800328e:	4b71      	ldr	r3, [pc, #452]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4a70      	ldr	r2, [pc, #448]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6713      	str	r3, [r2, #112]	; 0x70
 800329a:	4b6e      	ldr	r3, [pc, #440]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a6d      	ldr	r2, [pc, #436]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d015      	beq.n	80032da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fd fd21 	bl	8000cf4 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fd fd1d 	bl	8000cf4 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0bc      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032cc:	4b61      	ldr	r3, [pc, #388]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ee      	beq.n	80032b6 <HAL_RCC_OscConfig+0x33a>
 80032d8:	e014      	b.n	8003304 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fd fd0b 	bl	8000cf4 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fd fd07 	bl	8000cf4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0a6      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f8:	4b56      	ldr	r3, [pc, #344]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ee      	bne.n	80032e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330a:	4b52      	ldr	r3, [pc, #328]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a51      	ldr	r2, [pc, #324]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8092 	beq.w	8003444 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003320:	4b4c      	ldr	r3, [pc, #304]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b08      	cmp	r3, #8
 800332a:	d05c      	beq.n	80033e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d141      	bne.n	80033b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003334:	4b48      	ldr	r3, [pc, #288]	; (8003458 <HAL_RCC_OscConfig+0x4dc>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fd fcdb 	bl	8000cf4 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003342:	f7fd fcd7 	bl	8000cf4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e078      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003354:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f0      	bne.n	8003342 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	431a      	orrs	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	019b      	lsls	r3, r3, #6
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	4933      	ldr	r1, [pc, #204]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <HAL_RCC_OscConfig+0x4dc>)
 800338c:	2201      	movs	r2, #1
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fd fcb0 	bl	8000cf4 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003398:	f7fd fcac 	bl	8000cf4 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04d      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b2a      	ldr	r3, [pc, #168]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x41c>
 80033b6:	e045      	b.n	8003444 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_OscConfig+0x4dc>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fd fc99 	bl	8000cf4 <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c6:	f7fd fc95 	bl	8000cf4 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e036      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d8:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x44a>
 80033e4:	e02e      	b.n	8003444 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e029      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033f2:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_RCC_OscConfig+0x4d8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	429a      	cmp	r2, r3
 8003404:	d11c      	bne.n	8003440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	429a      	cmp	r2, r3
 8003412:	d115      	bne.n	8003440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800341a:	4013      	ands	r3, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003420:	4293      	cmp	r3, r2
 8003422:	d10d      	bne.n	8003440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800342e:	429a      	cmp	r2, r3
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40007000 	.word	0x40007000
 8003454:	40023800 	.word	0x40023800
 8003458:	42470060 	.word	0x42470060

0800345c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0cc      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003470:	4b68      	ldr	r3, [pc, #416]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d90c      	bls.n	8003498 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b65      	ldr	r3, [pc, #404]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003486:	4b63      	ldr	r3, [pc, #396]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d001      	beq.n	8003498 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0b8      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b0:	4b59      	ldr	r3, [pc, #356]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c8:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a52      	ldr	r2, [pc, #328]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b50      	ldr	r3, [pc, #320]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	494d      	ldr	r1, [pc, #308]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d044      	beq.n	800357c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fa:	4b47      	ldr	r3, [pc, #284]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d119      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d003      	beq.n	800351a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003516:	2b03      	cmp	r3, #3
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e06f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e067      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800353a:	4b37      	ldr	r3, [pc, #220]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f023 0203 	bic.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4934      	ldr	r1, [pc, #208]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800354c:	f7fd fbd2 	bl	8000cf4 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003552:	e00a      	b.n	800356a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003554:	f7fd fbce 	bl	8000cf4 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e04f      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 020c 	and.w	r2, r3, #12
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	429a      	cmp	r2, r3
 800357a:	d1eb      	bne.n	8003554 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d20c      	bcs.n	80035a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800358a:	4b22      	ldr	r3, [pc, #136]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003592:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCC_ClockConfig+0x1b8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d001      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e032      	b.n	800360a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b0:	4b19      	ldr	r3, [pc, #100]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4916      	ldr	r1, [pc, #88]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d009      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ce:	4b12      	ldr	r3, [pc, #72]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	490e      	ldr	r1, [pc, #56]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035e2:	f000 f821 	bl	8003628 <HAL_RCC_GetSysClockFreq>
 80035e6:	4601      	mov	r1, r0
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	091b      	lsrs	r3, r3, #4
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	4a0a      	ldr	r2, [pc, #40]	; (800361c <HAL_RCC_ClockConfig+0x1c0>)
 80035f4:	5cd3      	ldrb	r3, [r2, r3]
 80035f6:	fa21 f303 	lsr.w	r3, r1, r3
 80035fa:	4a09      	ldr	r2, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1c8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7fd fa70 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023c00 	.word	0x40023c00
 8003618:	40023800 	.word	0x40023800
 800361c:	08006fb0 	.word	0x08006fb0
 8003620:	20000008 	.word	0x20000008
 8003624:	2000000c 	.word	0x2000000c

08003628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	2300      	movs	r3, #0
 8003638:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363e:	4b50      	ldr	r3, [pc, #320]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b04      	cmp	r3, #4
 8003648:	d007      	beq.n	800365a <HAL_RCC_GetSysClockFreq+0x32>
 800364a:	2b08      	cmp	r3, #8
 800364c:	d008      	beq.n	8003660 <HAL_RCC_GetSysClockFreq+0x38>
 800364e:	2b00      	cmp	r3, #0
 8003650:	f040 808d 	bne.w	800376e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003656:	60bb      	str	r3, [r7, #8]
       break;
 8003658:	e08c      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365a:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_RCC_GetSysClockFreq+0x160>)
 800365c:	60bb      	str	r3, [r7, #8]
      break;
 800365e:	e089      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003660:	4b47      	ldr	r3, [pc, #284]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003668:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366a:	4b45      	ldr	r3, [pc, #276]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d023      	beq.n	80036be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003676:	4b42      	ldr	r3, [pc, #264]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	099b      	lsrs	r3, r3, #6
 800367c:	f04f 0400 	mov.w	r4, #0
 8003680:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	ea03 0501 	and.w	r5, r3, r1
 800368c:	ea04 0602 	and.w	r6, r4, r2
 8003690:	4a3d      	ldr	r2, [pc, #244]	; (8003788 <HAL_RCC_GetSysClockFreq+0x160>)
 8003692:	fb02 f106 	mul.w	r1, r2, r6
 8003696:	2200      	movs	r2, #0
 8003698:	fb02 f205 	mul.w	r2, r2, r5
 800369c:	440a      	add	r2, r1
 800369e:	493a      	ldr	r1, [pc, #232]	; (8003788 <HAL_RCC_GetSysClockFreq+0x160>)
 80036a0:	fba5 0101 	umull	r0, r1, r5, r1
 80036a4:	1853      	adds	r3, r2, r1
 80036a6:	4619      	mov	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f04f 0400 	mov.w	r4, #0
 80036ae:	461a      	mov	r2, r3
 80036b0:	4623      	mov	r3, r4
 80036b2:	f7fc fd95 	bl	80001e0 <__aeabi_uldivmod>
 80036b6:	4603      	mov	r3, r0
 80036b8:	460c      	mov	r4, r1
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	e049      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036be:	4b30      	ldr	r3, [pc, #192]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	099b      	lsrs	r3, r3, #6
 80036c4:	f04f 0400 	mov.w	r4, #0
 80036c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	ea03 0501 	and.w	r5, r3, r1
 80036d4:	ea04 0602 	and.w	r6, r4, r2
 80036d8:	4629      	mov	r1, r5
 80036da:	4632      	mov	r2, r6
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	f04f 0400 	mov.w	r4, #0
 80036e4:	0154      	lsls	r4, r2, #5
 80036e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ea:	014b      	lsls	r3, r1, #5
 80036ec:	4619      	mov	r1, r3
 80036ee:	4622      	mov	r2, r4
 80036f0:	1b49      	subs	r1, r1, r5
 80036f2:	eb62 0206 	sbc.w	r2, r2, r6
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	f04f 0400 	mov.w	r4, #0
 80036fe:	0194      	lsls	r4, r2, #6
 8003700:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003704:	018b      	lsls	r3, r1, #6
 8003706:	1a5b      	subs	r3, r3, r1
 8003708:	eb64 0402 	sbc.w	r4, r4, r2
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	00e2      	lsls	r2, r4, #3
 8003716:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800371a:	00d9      	lsls	r1, r3, #3
 800371c:	460b      	mov	r3, r1
 800371e:	4614      	mov	r4, r2
 8003720:	195b      	adds	r3, r3, r5
 8003722:	eb44 0406 	adc.w	r4, r4, r6
 8003726:	f04f 0100 	mov.w	r1, #0
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	02a2      	lsls	r2, r4, #10
 8003730:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003734:	0299      	lsls	r1, r3, #10
 8003736:	460b      	mov	r3, r1
 8003738:	4614      	mov	r4, r2
 800373a:	4618      	mov	r0, r3
 800373c:	4621      	mov	r1, r4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f04f 0400 	mov.w	r4, #0
 8003744:	461a      	mov	r2, r3
 8003746:	4623      	mov	r3, r4
 8003748:	f7fc fd4a 	bl	80001e0 <__aeabi_uldivmod>
 800374c:	4603      	mov	r3, r0
 800374e:	460c      	mov	r4, r1
 8003750:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_GetSysClockFreq+0x158>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	f003 0303 	and.w	r3, r3, #3
 800375c:	3301      	adds	r3, #1
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	fbb2 f3f3 	udiv	r3, r2, r3
 800376a:	60bb      	str	r3, [r7, #8]
      break;
 800376c:	e002      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003770:	60bb      	str	r3, [r7, #8]
      break;
 8003772:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003774:	68bb      	ldr	r3, [r7, #8]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	00f42400 	.word	0x00f42400
 8003788:	017d7840 	.word	0x017d7840

0800378c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000008 	.word	0x20000008

080037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037a8:	f7ff fff0 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037ac:	4601      	mov	r1, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0a9b      	lsrs	r3, r3, #10
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4a03      	ldr	r2, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ba:	5cd3      	ldrb	r3, [r2, r3]
 80037bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40023800 	.word	0x40023800
 80037c8:	08006fc0 	.word	0x08006fc0

080037cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d0:	f7ff ffdc 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037d4:	4601      	mov	r1, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	0b5b      	lsrs	r3, r3, #13
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	08006fc0 	.word	0x08006fc0

080037f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	220f      	movs	r2, #15
 8003802:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003804:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_RCC_GetClockConfig+0x5c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0203 	and.w	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <HAL_RCC_GetClockConfig+0x5c>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <HAL_RCC_GetClockConfig+0x5c>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	08db      	lsrs	r3, r3, #3
 800382e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003836:	4b07      	ldr	r3, [pc, #28]	; (8003854 <HAL_RCC_GetClockConfig+0x60>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	601a      	str	r2, [r3, #0]
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	40023c00 	.word	0x40023c00

08003858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e01d      	b.n	80038a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f815 	bl	80038ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3304      	adds	r3, #4
 8003894:	4619      	mov	r1, r3
 8003896:	4610      	mov	r0, r2
 8003898:	f000 f968 	bl	8003b6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b085      	sub	sp, #20
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b06      	cmp	r3, #6
 80038ea:	d007      	beq.n	80038fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d122      	bne.n	8003966 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d11b      	bne.n	8003966 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0202 	mvn.w	r2, #2
 8003936:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f8ee 	bl	8003b2e <HAL_TIM_IC_CaptureCallback>
 8003952:	e005      	b.n	8003960 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f8e0 	bl	8003b1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f8f1 	bl	8003b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b04      	cmp	r3, #4
 8003972:	d122      	bne.n	80039ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d11b      	bne.n	80039ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f06f 0204 	mvn.w	r2, #4
 800398a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f8c4 	bl	8003b2e <HAL_TIM_IC_CaptureCallback>
 80039a6:	e005      	b.n	80039b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f8b6 	bl	8003b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8c7 	bl	8003b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d122      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d11b      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0208 	mvn.w	r2, #8
 80039de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2204      	movs	r2, #4
 80039e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f89a 	bl	8003b2e <HAL_TIM_IC_CaptureCallback>
 80039fa:	e005      	b.n	8003a08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f88c 	bl	8003b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f89d 	bl	8003b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d122      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d11b      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f06f 0210 	mvn.w	r2, #16
 8003a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2208      	movs	r2, #8
 8003a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f870 	bl	8003b2e <HAL_TIM_IC_CaptureCallback>
 8003a4e:	e005      	b.n	8003a5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f862 	bl	8003b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f873 	bl	8003b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10e      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f06f 0201 	mvn.w	r2, #1
 8003a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fc ff4b 	bl	8000924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b80      	cmp	r3, #128	; 0x80
 8003a9a:	d10e      	bne.n	8003aba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d107      	bne.n	8003aba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f8e3 	bl	8003c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d10e      	bne.n	8003ae6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b40      	cmp	r3, #64	; 0x40
 8003ad4:	d107      	bne.n	8003ae6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f838 	bl	8003b56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f003 0320 	and.w	r3, r3, #32
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d10e      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d107      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f06f 0220 	mvn.w	r2, #32
 8003b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f8ad 	bl	8003c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a34      	ldr	r2, [pc, #208]	; (8003c50 <TIM_Base_SetConfig+0xe4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00f      	beq.n	8003ba4 <TIM_Base_SetConfig+0x38>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_Base_SetConfig+0x38>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a31      	ldr	r2, [pc, #196]	; (8003c54 <TIM_Base_SetConfig+0xe8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_Base_SetConfig+0x38>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <TIM_Base_SetConfig+0xec>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0x38>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a2f      	ldr	r2, [pc, #188]	; (8003c5c <TIM_Base_SetConfig+0xf0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a25      	ldr	r2, [pc, #148]	; (8003c50 <TIM_Base_SetConfig+0xe4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d01b      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc4:	d017      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <TIM_Base_SetConfig+0xe8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a21      	ldr	r2, [pc, #132]	; (8003c58 <TIM_Base_SetConfig+0xec>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <TIM_Base_SetConfig+0xf0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1f      	ldr	r2, [pc, #124]	; (8003c60 <TIM_Base_SetConfig+0xf4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <TIM_Base_SetConfig+0xf8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0x8a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <TIM_Base_SetConfig+0xfc>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a08      	ldr	r2, [pc, #32]	; (8003c50 <TIM_Base_SetConfig+0xe4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d103      	bne.n	8003c3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	615a      	str	r2, [r3, #20]
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40010000 	.word	0x40010000
 8003c54:	40000400 	.word	0x40000400
 8003c58:	40000800 	.word	0x40000800
 8003c5c:	40000c00 	.word	0x40000c00
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800

08003c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e03f      	b.n	8003d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fc fecc 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f829 	bl	8003d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d34:	b085      	sub	sp, #20
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d72:	f023 030c 	bic.w	r3, r3, #12
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9e:	f040 818b 	bne.w	80040b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4ac1      	ldr	r2, [pc, #772]	; (80040ac <UART_SetConfig+0x37c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d005      	beq.n	8003db8 <UART_SetConfig+0x88>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4abf      	ldr	r2, [pc, #764]	; (80040b0 <UART_SetConfig+0x380>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	f040 80bd 	bne.w	8003f32 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7ff fd08 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8003dbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	461d      	mov	r5, r3
 8003dc2:	f04f 0600 	mov.w	r6, #0
 8003dc6:	46a8      	mov	r8, r5
 8003dc8:	46b1      	mov	r9, r6
 8003dca:	eb18 0308 	adds.w	r3, r8, r8
 8003dce:	eb49 0409 	adc.w	r4, r9, r9
 8003dd2:	4698      	mov	r8, r3
 8003dd4:	46a1      	mov	r9, r4
 8003dd6:	eb18 0805 	adds.w	r8, r8, r5
 8003dda:	eb49 0906 	adc.w	r9, r9, r6
 8003dde:	f04f 0100 	mov.w	r1, #0
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003df2:	4688      	mov	r8, r1
 8003df4:	4691      	mov	r9, r2
 8003df6:	eb18 0005 	adds.w	r0, r8, r5
 8003dfa:	eb49 0106 	adc.w	r1, r9, r6
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	461d      	mov	r5, r3
 8003e04:	f04f 0600 	mov.w	r6, #0
 8003e08:	196b      	adds	r3, r5, r5
 8003e0a:	eb46 0406 	adc.w	r4, r6, r6
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4623      	mov	r3, r4
 8003e12:	f7fc f9e5 	bl	80001e0 <__aeabi_uldivmod>
 8003e16:	4603      	mov	r3, r0
 8003e18:	460c      	mov	r4, r1
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4ba5      	ldr	r3, [pc, #660]	; (80040b4 <UART_SetConfig+0x384>)
 8003e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	461d      	mov	r5, r3
 8003e2c:	f04f 0600 	mov.w	r6, #0
 8003e30:	46a9      	mov	r9, r5
 8003e32:	46b2      	mov	sl, r6
 8003e34:	eb19 0309 	adds.w	r3, r9, r9
 8003e38:	eb4a 040a 	adc.w	r4, sl, sl
 8003e3c:	4699      	mov	r9, r3
 8003e3e:	46a2      	mov	sl, r4
 8003e40:	eb19 0905 	adds.w	r9, r9, r5
 8003e44:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e5c:	4689      	mov	r9, r1
 8003e5e:	4692      	mov	sl, r2
 8003e60:	eb19 0005 	adds.w	r0, r9, r5
 8003e64:	eb4a 0106 	adc.w	r1, sl, r6
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	f04f 0600 	mov.w	r6, #0
 8003e72:	196b      	adds	r3, r5, r5
 8003e74:	eb46 0406 	adc.w	r4, r6, r6
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4623      	mov	r3, r4
 8003e7c:	f7fc f9b0 	bl	80001e0 <__aeabi_uldivmod>
 8003e80:	4603      	mov	r3, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	461a      	mov	r2, r3
 8003e86:	4b8b      	ldr	r3, [pc, #556]	; (80040b4 <UART_SetConfig+0x384>)
 8003e88:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	2164      	movs	r1, #100	; 0x64
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	3332      	adds	r3, #50	; 0x32
 8003e9a:	4a86      	ldr	r2, [pc, #536]	; (80040b4 <UART_SetConfig+0x384>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ea8:	4498      	add	r8, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	461d      	mov	r5, r3
 8003eae:	f04f 0600 	mov.w	r6, #0
 8003eb2:	46a9      	mov	r9, r5
 8003eb4:	46b2      	mov	sl, r6
 8003eb6:	eb19 0309 	adds.w	r3, r9, r9
 8003eba:	eb4a 040a 	adc.w	r4, sl, sl
 8003ebe:	4699      	mov	r9, r3
 8003ec0:	46a2      	mov	sl, r4
 8003ec2:	eb19 0905 	adds.w	r9, r9, r5
 8003ec6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003eca:	f04f 0100 	mov.w	r1, #0
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ede:	4689      	mov	r9, r1
 8003ee0:	4692      	mov	sl, r2
 8003ee2:	eb19 0005 	adds.w	r0, r9, r5
 8003ee6:	eb4a 0106 	adc.w	r1, sl, r6
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	461d      	mov	r5, r3
 8003ef0:	f04f 0600 	mov.w	r6, #0
 8003ef4:	196b      	adds	r3, r5, r5
 8003ef6:	eb46 0406 	adc.w	r4, r6, r6
 8003efa:	461a      	mov	r2, r3
 8003efc:	4623      	mov	r3, r4
 8003efe:	f7fc f96f 	bl	80001e0 <__aeabi_uldivmod>
 8003f02:	4603      	mov	r3, r0
 8003f04:	460c      	mov	r4, r1
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b6a      	ldr	r3, [pc, #424]	; (80040b4 <UART_SetConfig+0x384>)
 8003f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2164      	movs	r1, #100	; 0x64
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	3332      	adds	r3, #50	; 0x32
 8003f1c:	4a65      	ldr	r2, [pc, #404]	; (80040b4 <UART_SetConfig+0x384>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f003 0207 	and.w	r2, r3, #7
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4442      	add	r2, r8
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	e26f      	b.n	8004412 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f32:	f7ff fc37 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8003f36:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	461d      	mov	r5, r3
 8003f3c:	f04f 0600 	mov.w	r6, #0
 8003f40:	46a8      	mov	r8, r5
 8003f42:	46b1      	mov	r9, r6
 8003f44:	eb18 0308 	adds.w	r3, r8, r8
 8003f48:	eb49 0409 	adc.w	r4, r9, r9
 8003f4c:	4698      	mov	r8, r3
 8003f4e:	46a1      	mov	r9, r4
 8003f50:	eb18 0805 	adds.w	r8, r8, r5
 8003f54:	eb49 0906 	adc.w	r9, r9, r6
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f64:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f68:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f6c:	4688      	mov	r8, r1
 8003f6e:	4691      	mov	r9, r2
 8003f70:	eb18 0005 	adds.w	r0, r8, r5
 8003f74:	eb49 0106 	adc.w	r1, r9, r6
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	461d      	mov	r5, r3
 8003f7e:	f04f 0600 	mov.w	r6, #0
 8003f82:	196b      	adds	r3, r5, r5
 8003f84:	eb46 0406 	adc.w	r4, r6, r6
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	f7fc f928 	bl	80001e0 <__aeabi_uldivmod>
 8003f90:	4603      	mov	r3, r0
 8003f92:	460c      	mov	r4, r1
 8003f94:	461a      	mov	r2, r3
 8003f96:	4b47      	ldr	r3, [pc, #284]	; (80040b4 <UART_SetConfig+0x384>)
 8003f98:	fba3 2302 	umull	r2, r3, r3, r2
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	461d      	mov	r5, r3
 8003fa6:	f04f 0600 	mov.w	r6, #0
 8003faa:	46a9      	mov	r9, r5
 8003fac:	46b2      	mov	sl, r6
 8003fae:	eb19 0309 	adds.w	r3, r9, r9
 8003fb2:	eb4a 040a 	adc.w	r4, sl, sl
 8003fb6:	4699      	mov	r9, r3
 8003fb8:	46a2      	mov	sl, r4
 8003fba:	eb19 0905 	adds.w	r9, r9, r5
 8003fbe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fc2:	f04f 0100 	mov.w	r1, #0
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fd2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fd6:	4689      	mov	r9, r1
 8003fd8:	4692      	mov	sl, r2
 8003fda:	eb19 0005 	adds.w	r0, r9, r5
 8003fde:	eb4a 0106 	adc.w	r1, sl, r6
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	461d      	mov	r5, r3
 8003fe8:	f04f 0600 	mov.w	r6, #0
 8003fec:	196b      	adds	r3, r5, r5
 8003fee:	eb46 0406 	adc.w	r4, r6, r6
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4623      	mov	r3, r4
 8003ff6:	f7fc f8f3 	bl	80001e0 <__aeabi_uldivmod>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b2c      	ldr	r3, [pc, #176]	; (80040b4 <UART_SetConfig+0x384>)
 8004002:	fba3 1302 	umull	r1, r3, r3, r2
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2164      	movs	r1, #100	; 0x64
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	3332      	adds	r3, #50	; 0x32
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <UART_SetConfig+0x384>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004022:	4498      	add	r8, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	461d      	mov	r5, r3
 8004028:	f04f 0600 	mov.w	r6, #0
 800402c:	46a9      	mov	r9, r5
 800402e:	46b2      	mov	sl, r6
 8004030:	eb19 0309 	adds.w	r3, r9, r9
 8004034:	eb4a 040a 	adc.w	r4, sl, sl
 8004038:	4699      	mov	r9, r3
 800403a:	46a2      	mov	sl, r4
 800403c:	eb19 0905 	adds.w	r9, r9, r5
 8004040:	eb4a 0a06 	adc.w	sl, sl, r6
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004050:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004054:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004058:	4689      	mov	r9, r1
 800405a:	4692      	mov	sl, r2
 800405c:	eb19 0005 	adds.w	r0, r9, r5
 8004060:	eb4a 0106 	adc.w	r1, sl, r6
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	461d      	mov	r5, r3
 800406a:	f04f 0600 	mov.w	r6, #0
 800406e:	196b      	adds	r3, r5, r5
 8004070:	eb46 0406 	adc.w	r4, r6, r6
 8004074:	461a      	mov	r2, r3
 8004076:	4623      	mov	r3, r4
 8004078:	f7fc f8b2 	bl	80001e0 <__aeabi_uldivmod>
 800407c:	4603      	mov	r3, r0
 800407e:	460c      	mov	r4, r1
 8004080:	461a      	mov	r2, r3
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <UART_SetConfig+0x384>)
 8004084:	fba3 1302 	umull	r1, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	2164      	movs	r1, #100	; 0x64
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	3332      	adds	r3, #50	; 0x32
 8004096:	4a07      	ldr	r2, [pc, #28]	; (80040b4 <UART_SetConfig+0x384>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	f003 0207 	and.w	r2, r3, #7
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4442      	add	r2, r8
 80040a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80040aa:	e1b2      	b.n	8004412 <UART_SetConfig+0x6e2>
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40011400 	.word	0x40011400
 80040b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4ad7      	ldr	r2, [pc, #860]	; (800441c <UART_SetConfig+0x6ec>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d005      	beq.n	80040ce <UART_SetConfig+0x39e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4ad6      	ldr	r2, [pc, #856]	; (8004420 <UART_SetConfig+0x6f0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	f040 80d1 	bne.w	8004270 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80040ce:	f7ff fb7d 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 80040d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	469a      	mov	sl, r3
 80040d8:	f04f 0b00 	mov.w	fp, #0
 80040dc:	46d0      	mov	r8, sl
 80040de:	46d9      	mov	r9, fp
 80040e0:	eb18 0308 	adds.w	r3, r8, r8
 80040e4:	eb49 0409 	adc.w	r4, r9, r9
 80040e8:	4698      	mov	r8, r3
 80040ea:	46a1      	mov	r9, r4
 80040ec:	eb18 080a 	adds.w	r8, r8, sl
 80040f0:	eb49 090b 	adc.w	r9, r9, fp
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004100:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004104:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004108:	4688      	mov	r8, r1
 800410a:	4691      	mov	r9, r2
 800410c:	eb1a 0508 	adds.w	r5, sl, r8
 8004110:	eb4b 0609 	adc.w	r6, fp, r9
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4619      	mov	r1, r3
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	f04f 0400 	mov.w	r4, #0
 8004126:	0094      	lsls	r4, r2, #2
 8004128:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800412c:	008b      	lsls	r3, r1, #2
 800412e:	461a      	mov	r2, r3
 8004130:	4623      	mov	r3, r4
 8004132:	4628      	mov	r0, r5
 8004134:	4631      	mov	r1, r6
 8004136:	f7fc f853 	bl	80001e0 <__aeabi_uldivmod>
 800413a:	4603      	mov	r3, r0
 800413c:	460c      	mov	r4, r1
 800413e:	461a      	mov	r2, r3
 8004140:	4bb8      	ldr	r3, [pc, #736]	; (8004424 <UART_SetConfig+0x6f4>)
 8004142:	fba3 2302 	umull	r2, r3, r3, r2
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	469b      	mov	fp, r3
 8004150:	f04f 0c00 	mov.w	ip, #0
 8004154:	46d9      	mov	r9, fp
 8004156:	46e2      	mov	sl, ip
 8004158:	eb19 0309 	adds.w	r3, r9, r9
 800415c:	eb4a 040a 	adc.w	r4, sl, sl
 8004160:	4699      	mov	r9, r3
 8004162:	46a2      	mov	sl, r4
 8004164:	eb19 090b 	adds.w	r9, r9, fp
 8004168:	eb4a 0a0c 	adc.w	sl, sl, ip
 800416c:	f04f 0100 	mov.w	r1, #0
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004178:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800417c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004180:	4689      	mov	r9, r1
 8004182:	4692      	mov	sl, r2
 8004184:	eb1b 0509 	adds.w	r5, fp, r9
 8004188:	eb4c 060a 	adc.w	r6, ip, sl
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	f04f 0400 	mov.w	r4, #0
 800419e:	0094      	lsls	r4, r2, #2
 80041a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041a4:	008b      	lsls	r3, r1, #2
 80041a6:	461a      	mov	r2, r3
 80041a8:	4623      	mov	r3, r4
 80041aa:	4628      	mov	r0, r5
 80041ac:	4631      	mov	r1, r6
 80041ae:	f7fc f817 	bl	80001e0 <__aeabi_uldivmod>
 80041b2:	4603      	mov	r3, r0
 80041b4:	460c      	mov	r4, r1
 80041b6:	461a      	mov	r2, r3
 80041b8:	4b9a      	ldr	r3, [pc, #616]	; (8004424 <UART_SetConfig+0x6f4>)
 80041ba:	fba3 1302 	umull	r1, r3, r3, r2
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2164      	movs	r1, #100	; 0x64
 80041c2:	fb01 f303 	mul.w	r3, r1, r3
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a95      	ldr	r2, [pc, #596]	; (8004424 <UART_SetConfig+0x6f4>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d8:	4498      	add	r8, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	469b      	mov	fp, r3
 80041de:	f04f 0c00 	mov.w	ip, #0
 80041e2:	46d9      	mov	r9, fp
 80041e4:	46e2      	mov	sl, ip
 80041e6:	eb19 0309 	adds.w	r3, r9, r9
 80041ea:	eb4a 040a 	adc.w	r4, sl, sl
 80041ee:	4699      	mov	r9, r3
 80041f0:	46a2      	mov	sl, r4
 80041f2:	eb19 090b 	adds.w	r9, r9, fp
 80041f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004206:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800420a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800420e:	4689      	mov	r9, r1
 8004210:	4692      	mov	sl, r2
 8004212:	eb1b 0509 	adds.w	r5, fp, r9
 8004216:	eb4c 060a 	adc.w	r6, ip, sl
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4619      	mov	r1, r3
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	f04f 0400 	mov.w	r4, #0
 800422c:	0094      	lsls	r4, r2, #2
 800422e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004232:	008b      	lsls	r3, r1, #2
 8004234:	461a      	mov	r2, r3
 8004236:	4623      	mov	r3, r4
 8004238:	4628      	mov	r0, r5
 800423a:	4631      	mov	r1, r6
 800423c:	f7fb ffd0 	bl	80001e0 <__aeabi_uldivmod>
 8004240:	4603      	mov	r3, r0
 8004242:	460c      	mov	r4, r1
 8004244:	461a      	mov	r2, r3
 8004246:	4b77      	ldr	r3, [pc, #476]	; (8004424 <UART_SetConfig+0x6f4>)
 8004248:	fba3 1302 	umull	r1, r3, r3, r2
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	2164      	movs	r1, #100	; 0x64
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	3332      	adds	r3, #50	; 0x32
 800425a:	4a72      	ldr	r2, [pc, #456]	; (8004424 <UART_SetConfig+0x6f4>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	f003 020f 	and.w	r2, r3, #15
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4442      	add	r2, r8
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	e0d0      	b.n	8004412 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004270:	f7ff fa98 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8004274:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	469a      	mov	sl, r3
 800427a:	f04f 0b00 	mov.w	fp, #0
 800427e:	46d0      	mov	r8, sl
 8004280:	46d9      	mov	r9, fp
 8004282:	eb18 0308 	adds.w	r3, r8, r8
 8004286:	eb49 0409 	adc.w	r4, r9, r9
 800428a:	4698      	mov	r8, r3
 800428c:	46a1      	mov	r9, r4
 800428e:	eb18 080a 	adds.w	r8, r8, sl
 8004292:	eb49 090b 	adc.w	r9, r9, fp
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042aa:	4688      	mov	r8, r1
 80042ac:	4691      	mov	r9, r2
 80042ae:	eb1a 0508 	adds.w	r5, sl, r8
 80042b2:	eb4b 0609 	adc.w	r6, fp, r9
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4619      	mov	r1, r3
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	f04f 0400 	mov.w	r4, #0
 80042c8:	0094      	lsls	r4, r2, #2
 80042ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042ce:	008b      	lsls	r3, r1, #2
 80042d0:	461a      	mov	r2, r3
 80042d2:	4623      	mov	r3, r4
 80042d4:	4628      	mov	r0, r5
 80042d6:	4631      	mov	r1, r6
 80042d8:	f7fb ff82 	bl	80001e0 <__aeabi_uldivmod>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	461a      	mov	r2, r3
 80042e2:	4b50      	ldr	r3, [pc, #320]	; (8004424 <UART_SetConfig+0x6f4>)
 80042e4:	fba3 2302 	umull	r2, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	469b      	mov	fp, r3
 80042f2:	f04f 0c00 	mov.w	ip, #0
 80042f6:	46d9      	mov	r9, fp
 80042f8:	46e2      	mov	sl, ip
 80042fa:	eb19 0309 	adds.w	r3, r9, r9
 80042fe:	eb4a 040a 	adc.w	r4, sl, sl
 8004302:	4699      	mov	r9, r3
 8004304:	46a2      	mov	sl, r4
 8004306:	eb19 090b 	adds.w	r9, r9, fp
 800430a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800431a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800431e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004322:	4689      	mov	r9, r1
 8004324:	4692      	mov	sl, r2
 8004326:	eb1b 0509 	adds.w	r5, fp, r9
 800432a:	eb4c 060a 	adc.w	r6, ip, sl
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4619      	mov	r1, r3
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	f04f 0400 	mov.w	r4, #0
 8004340:	0094      	lsls	r4, r2, #2
 8004342:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004346:	008b      	lsls	r3, r1, #2
 8004348:	461a      	mov	r2, r3
 800434a:	4623      	mov	r3, r4
 800434c:	4628      	mov	r0, r5
 800434e:	4631      	mov	r1, r6
 8004350:	f7fb ff46 	bl	80001e0 <__aeabi_uldivmod>
 8004354:	4603      	mov	r3, r0
 8004356:	460c      	mov	r4, r1
 8004358:	461a      	mov	r2, r3
 800435a:	4b32      	ldr	r3, [pc, #200]	; (8004424 <UART_SetConfig+0x6f4>)
 800435c:	fba3 1302 	umull	r1, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	2164      	movs	r1, #100	; 0x64
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	3332      	adds	r3, #50	; 0x32
 800436e:	4a2d      	ldr	r2, [pc, #180]	; (8004424 <UART_SetConfig+0x6f4>)
 8004370:	fba2 2303 	umull	r2, r3, r2, r3
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437a:	4498      	add	r8, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	469b      	mov	fp, r3
 8004380:	f04f 0c00 	mov.w	ip, #0
 8004384:	46d9      	mov	r9, fp
 8004386:	46e2      	mov	sl, ip
 8004388:	eb19 0309 	adds.w	r3, r9, r9
 800438c:	eb4a 040a 	adc.w	r4, sl, sl
 8004390:	4699      	mov	r9, r3
 8004392:	46a2      	mov	sl, r4
 8004394:	eb19 090b 	adds.w	r9, r9, fp
 8004398:	eb4a 0a0c 	adc.w	sl, sl, ip
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043b0:	4689      	mov	r9, r1
 80043b2:	4692      	mov	sl, r2
 80043b4:	eb1b 0509 	adds.w	r5, fp, r9
 80043b8:	eb4c 060a 	adc.w	r6, ip, sl
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	f04f 0400 	mov.w	r4, #0
 80043ce:	0094      	lsls	r4, r2, #2
 80043d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043d4:	008b      	lsls	r3, r1, #2
 80043d6:	461a      	mov	r2, r3
 80043d8:	4623      	mov	r3, r4
 80043da:	4628      	mov	r0, r5
 80043dc:	4631      	mov	r1, r6
 80043de:	f7fb feff 	bl	80001e0 <__aeabi_uldivmod>
 80043e2:	4603      	mov	r3, r0
 80043e4:	460c      	mov	r4, r1
 80043e6:	461a      	mov	r2, r3
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <UART_SetConfig+0x6f4>)
 80043ea:	fba3 1302 	umull	r1, r3, r3, r2
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2164      	movs	r1, #100	; 0x64
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	3332      	adds	r3, #50	; 0x32
 80043fc:	4a09      	ldr	r2, [pc, #36]	; (8004424 <UART_SetConfig+0x6f4>)
 80043fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	f003 020f 	and.w	r2, r3, #15
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4442      	add	r2, r8
 800440e:	609a      	str	r2, [r3, #8]
}
 8004410:	e7ff      	b.n	8004412 <UART_SetConfig+0x6e2>
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800441c:	40011000 	.word	0x40011000
 8004420:	40011400 	.word	0x40011400
 8004424:	51eb851f 	.word	0x51eb851f

08004428 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800443e:	f3ef 8305 	mrs	r3, IPSR
 8004442:	60bb      	str	r3, [r7, #8]
  return(result);
 8004444:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10f      	bne.n	800446a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800444a:	f3ef 8310 	mrs	r3, PRIMASK
 800444e:	607b      	str	r3, [r7, #4]
  return(result);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004456:	f3ef 8311 	mrs	r3, BASEPRI
 800445a:	603b      	str	r3, [r7, #0]
  return(result);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <osKernelInitialize+0x3a>
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <osKernelInitialize+0x64>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d103      	bne.n	8004472 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800446a:	f06f 0305 	mvn.w	r3, #5
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e00c      	b.n	800448c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <osKernelInitialize+0x64>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d105      	bne.n	8004486 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <osKernelInitialize+0x64>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e002      	b.n	800448c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800448c:	68fb      	ldr	r3, [r7, #12]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000034 	.word	0x20000034

080044a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a6:	f3ef 8305 	mrs	r3, IPSR
 80044aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80044ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10f      	bne.n	80044d2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b2:	f3ef 8310 	mrs	r3, PRIMASK
 80044b6:	607b      	str	r3, [r7, #4]
  return(result);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d105      	bne.n	80044ca <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044be:	f3ef 8311 	mrs	r3, BASEPRI
 80044c2:	603b      	str	r3, [r7, #0]
  return(result);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <osKernelStart+0x3a>
 80044ca:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <osKernelStart+0x68>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d103      	bne.n	80044da <osKernelStart+0x3a>
    stat = osErrorISR;
 80044d2:	f06f 0305 	mvn.w	r3, #5
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e010      	b.n	80044fc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <osKernelStart+0x68>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d109      	bne.n	80044f6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044e2:	f7ff ffa1 	bl	8004428 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <osKernelStart+0x68>)
 80044e8:	2202      	movs	r2, #2
 80044ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044ec:	f001 f870 	bl	80055d0 <vTaskStartScheduler>
      stat = osOK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e002      	b.n	80044fc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80044f6:	f04f 33ff 	mov.w	r3, #4294967295
 80044fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80044fc:	68fb      	ldr	r3, [r7, #12]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000034 	.word	0x20000034

0800450c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b090      	sub	sp, #64	; 0x40
 8004510:	af04      	add	r7, sp, #16
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800451c:	f3ef 8305 	mrs	r3, IPSR
 8004520:	61fb      	str	r3, [r7, #28]
  return(result);
 8004522:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004524:	2b00      	cmp	r3, #0
 8004526:	f040 808f 	bne.w	8004648 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800452a:	f3ef 8310 	mrs	r3, PRIMASK
 800452e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004536:	f3ef 8311 	mrs	r3, BASEPRI
 800453a:	617b      	str	r3, [r7, #20]
  return(result);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <osThreadNew+0x3e>
 8004542:	4b44      	ldr	r3, [pc, #272]	; (8004654 <osThreadNew+0x148>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d07e      	beq.n	8004648 <osThreadNew+0x13c>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d07b      	beq.n	8004648 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004554:	2318      	movs	r3, #24
 8004556:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800455c:	f04f 33ff 	mov.w	r3, #4294967295
 8004560:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d045      	beq.n	80045f4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <osThreadNew+0x6a>
        name = attr->name;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <osThreadNew+0x90>
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	2b38      	cmp	r3, #56	; 0x38
 800458e:	d805      	bhi.n	800459c <osThreadNew+0x90>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <osThreadNew+0x94>
        return (NULL);
 800459c:	2300      	movs	r3, #0
 800459e:	e054      	b.n	800464a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00e      	beq.n	80045d6 <osThreadNew+0xca>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b5b      	cmp	r3, #91	; 0x5b
 80045be:	d90a      	bls.n	80045d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d006      	beq.n	80045d6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <osThreadNew+0xca>
        mem = 1;
 80045d0:	2301      	movs	r3, #1
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	e010      	b.n	80045f8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10c      	bne.n	80045f8 <osThreadNew+0xec>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <osThreadNew+0xec>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <osThreadNew+0xec>
          mem = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	e001      	b.n	80045f8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d110      	bne.n	8004620 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004606:	9202      	str	r2, [sp, #8]
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fe09 	bl	800522c <xTaskCreateStatic>
 800461a:	4603      	mov	r3, r0
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	e013      	b.n	8004648 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004620:	6a3b      	ldr	r3, [r7, #32]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d110      	bne.n	8004648 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	b29a      	uxth	r2, r3
 800462a:	f107 0310 	add.w	r3, r7, #16
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fe51 	bl	80052e0 <xTaskCreate>
 800463e:	4603      	mov	r3, r0
 8004640:	2b01      	cmp	r3, #1
 8004642:	d001      	beq.n	8004648 <osThreadNew+0x13c>
          hTask = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004648:	693b      	ldr	r3, [r7, #16]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3730      	adds	r7, #48	; 0x30
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000034 	.word	0x20000034

08004658 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004660:	f3ef 8305 	mrs	r3, IPSR
 8004664:	613b      	str	r3, [r7, #16]
  return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10f      	bne.n	800468c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800466c:	f3ef 8310 	mrs	r3, PRIMASK
 8004670:	60fb      	str	r3, [r7, #12]
  return(result);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004678:	f3ef 8311 	mrs	r3, BASEPRI
 800467c:	60bb      	str	r3, [r7, #8]
  return(result);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <osDelay+0x3c>
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <osDelay+0x58>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d103      	bne.n	8004694 <osDelay+0x3c>
    stat = osErrorISR;
 800468c:	f06f 0305 	mvn.w	r3, #5
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e007      	b.n	80046a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 ff62 	bl	8005568 <vTaskDelay>
    }
  }

  return (stat);
 80046a4:	697b      	ldr	r3, [r7, #20]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000034 	.word	0x20000034

080046b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a07      	ldr	r2, [pc, #28]	; (80046e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80046c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4a06      	ldr	r2, [pc, #24]	; (80046e4 <vApplicationGetIdleTaskMemory+0x30>)
 80046ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000038 	.word	0x20000038
 80046e4:	20000094 	.word	0x20000094

080046e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <vApplicationGetTimerTaskMemory+0x2c>)
 80046f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a06      	ldr	r2, [pc, #24]	; (8004718 <vApplicationGetTimerTaskMemory+0x30>)
 80046fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004706:	601a      	str	r2, [r3, #0]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	20000294 	.word	0x20000294
 8004718:	200002f0 	.word	0x200002f0

0800471c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f103 0208 	add.w	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f103 0208 	add.w	r2, r3, #8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f103 0208 	add.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d103      	bne.n	80047de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e00c      	b.n	80047f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3308      	adds	r3, #8
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e002      	b.n	80047ec <vListInsert+0x2e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d2f6      	bcs.n	80047e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6892      	ldr	r2, [r2, #8]
 8004846:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6852      	ldr	r2, [r2, #4]
 8004850:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	d103      	bne.n	8004864 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	1e5a      	subs	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	e7fe      	b.n	80048aa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80048ac:	f002 f80e 	bl	80068cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	441a      	add	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048dc:	3b01      	subs	r3, #1
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048e2:	fb01 f303 	mul.w	r3, r1, r3
 80048e6:	441a      	add	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	22ff      	movs	r2, #255	; 0xff
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	22ff      	movs	r2, #255	; 0xff
 80048f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d114      	bne.n	800492c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01a      	beq.n	8004940 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3310      	adds	r3, #16
 800490e:	4618      	mov	r0, r3
 8004910:	f001 f8de 	bl	8005ad0 <xTaskRemoveFromEventList>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d012      	beq.n	8004940 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <xQueueGenericReset+0xcc>)
 800491c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	e009      	b.n	8004940 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3310      	adds	r3, #16
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fef3 	bl	800471c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3324      	adds	r3, #36	; 0x24
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff feee 	bl	800471c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004940:	f001 fff2 	bl	8006928 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004944:	2301      	movs	r3, #1
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	; 0x38
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <xQueueGenericCreateStatic+0x28>
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
 800497a:	e7fe      	b.n	800497a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <xQueueGenericCreateStatic+0x42>
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
 8004994:	e7fe      	b.n	8004994 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <xQueueGenericCreateStatic+0x4e>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <xQueueGenericCreateStatic+0x52>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <xQueueGenericCreateStatic+0x54>
 80049a6:	2300      	movs	r3, #0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <xQueueGenericCreateStatic+0x6c>
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	e7fe      	b.n	80049be <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <xQueueGenericCreateStatic+0x78>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <xQueueGenericCreateStatic+0x7c>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <xQueueGenericCreateStatic+0x7e>
 80049d0:	2300      	movs	r3, #0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <xQueueGenericCreateStatic+0x96>
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	e7fe      	b.n	80049e8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049ea:	2350      	movs	r3, #80	; 0x50
 80049ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b50      	cmp	r3, #80	; 0x50
 80049f2:	d009      	beq.n	8004a08 <xQueueGenericCreateStatic+0xb4>
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	e7fe      	b.n	8004a06 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a08:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00d      	beq.n	8004a30 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4613      	mov	r3, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 f805 	bl	8004a3a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3730      	adds	r7, #48	; 0x30
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	e002      	b.n	8004a5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a68:	2101      	movs	r1, #1
 8004a6a:	69b8      	ldr	r0, [r7, #24]
 8004a6c:	f7ff ff0a 	bl	8004884 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08e      	sub	sp, #56	; 0x38
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <xQueueGenericSend+0x30>
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aae:	e7fe      	b.n	8004aae <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d103      	bne.n	8004abe <xQueueGenericSend+0x3e>
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <xQueueGenericSend+0x42>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e000      	b.n	8004ac4 <xQueueGenericSend+0x44>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d109      	bne.n	8004adc <xQueueGenericSend+0x5c>
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ada:	e7fe      	b.n	8004ada <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d103      	bne.n	8004aea <xQueueGenericSend+0x6a>
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <xQueueGenericSend+0x6e>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <xQueueGenericSend+0x70>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <xQueueGenericSend+0x88>
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	623b      	str	r3, [r7, #32]
 8004b06:	e7fe      	b.n	8004b06 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b08:	f001 f998 	bl	8005e3c <xTaskGetSchedulerState>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <xQueueGenericSend+0x98>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <xQueueGenericSend+0x9c>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <xQueueGenericSend+0x9e>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <xQueueGenericSend+0xb6>
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e7fe      	b.n	8004b34 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b36:	f001 fec9 	bl	80068cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <xQueueGenericSend+0xcc>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d129      	bne.n	8004ba0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b52:	f000 f9ff 	bl	8004f54 <prvCopyDataToQueue>
 8004b56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d010      	beq.n	8004b82 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	3324      	adds	r3, #36	; 0x24
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 ffb3 	bl	8005ad0 <xTaskRemoveFromEventList>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d013      	beq.n	8004b98 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b70:	4b3f      	ldr	r3, [pc, #252]	; (8004c70 <xQueueGenericSend+0x1f0>)
 8004b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	e00a      	b.n	8004b98 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b88:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <xQueueGenericSend+0x1f0>)
 8004b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b98:	f001 fec6 	bl	8006928 <vPortExitCritical>
				return pdPASS;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e063      	b.n	8004c68 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ba6:	f001 febf 	bl	8006928 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e05c      	b.n	8004c68 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f000 ffeb 	bl	8005b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bc2:	f001 feb1 	bl	8006928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bc6:	f000 fd67 	bl	8005698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bca:	f001 fe7f 	bl	80068cc <vPortEnterCritical>
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bd4:	b25b      	sxtb	r3, r3
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bda:	d103      	bne.n	8004be4 <xQueueGenericSend+0x164>
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bea:	b25b      	sxtb	r3, r3
 8004bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf0:	d103      	bne.n	8004bfa <xQueueGenericSend+0x17a>
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bfa:	f001 fe95 	bl	8006928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bfe:	1d3a      	adds	r2, r7, #4
 8004c00:	f107 0314 	add.w	r3, r7, #20
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 ffda 	bl	8005bc0 <xTaskCheckForTimeOut>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d124      	bne.n	8004c5c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c14:	f000 fa96 	bl	8005144 <prvIsQueueFull>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d018      	beq.n	8004c50 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	3310      	adds	r3, #16
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4611      	mov	r1, r2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 ff04 	bl	8005a34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c2e:	f000 fa21 	bl	8005074 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c32:	f000 fd3f 	bl	80056b4 <xTaskResumeAll>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f47f af7c 	bne.w	8004b36 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004c3e:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <xQueueGenericSend+0x1f0>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	e772      	b.n	8004b36 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c52:	f000 fa0f 	bl	8005074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c56:	f000 fd2d 	bl	80056b4 <xTaskResumeAll>
 8004c5a:	e76c      	b.n	8004b36 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c5e:	f000 fa09 	bl	8005074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c62:	f000 fd27 	bl	80056b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3738      	adds	r7, #56	; 0x38
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08e      	sub	sp, #56	; 0x38
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d109      	bne.n	8004ca0 <xQueueGenericSendFromISR+0x2c>
 8004c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9e:	e7fe      	b.n	8004c9e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d103      	bne.n	8004cae <xQueueGenericSendFromISR+0x3a>
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <xQueueGenericSendFromISR+0x3e>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <xQueueGenericSendFromISR+0x40>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <xQueueGenericSendFromISR+0x58>
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	e7fe      	b.n	8004cca <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d103      	bne.n	8004cda <xQueueGenericSendFromISR+0x66>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <xQueueGenericSendFromISR+0x6a>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <xQueueGenericSendFromISR+0x6c>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <xQueueGenericSendFromISR+0x84>
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cf8:	f001 fec4 	bl	8006a84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cfc:	f3ef 8211 	mrs	r2, BASEPRI
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	61ba      	str	r2, [r7, #24]
 8004d12:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d14:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <xQueueGenericSendFromISR+0xb6>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d12c      	bne.n	8004d84 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d3a:	f000 f90b 	bl	8004f54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d3e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d46:	d112      	bne.n	8004d6e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d016      	beq.n	8004d7e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d52:	3324      	adds	r3, #36	; 0x24
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 febb 	bl	8005ad0 <xTaskRemoveFromEventList>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e007      	b.n	8004d7e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d72:	3301      	adds	r3, #1
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	b25a      	sxtb	r2, r3
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004d82:	e001      	b.n	8004d88 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d84:	2300      	movs	r3, #0
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3738      	adds	r7, #56	; 0x38
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08c      	sub	sp, #48	; 0x30
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <xQueueReceive+0x2e>
	__asm volatile
 8004db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	623b      	str	r3, [r7, #32]
 8004dc8:	e7fe      	b.n	8004dc8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d103      	bne.n	8004dd8 <xQueueReceive+0x3c>
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <xQueueReceive+0x40>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <xQueueReceive+0x42>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <xQueueReceive+0x5a>
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e7fe      	b.n	8004df4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004df6:	f001 f821 	bl	8005e3c <xTaskGetSchedulerState>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <xQueueReceive+0x6a>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <xQueueReceive+0x6e>
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <xQueueReceive+0x70>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <xQueueReceive+0x88>
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e7fe      	b.n	8004e22 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e24:	f001 fd52 	bl	80068cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01f      	beq.n	8004e74 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e38:	f000 f8f6 	bl	8005028 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	1e5a      	subs	r2, r3, #1
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00f      	beq.n	8004e6c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	3310      	adds	r3, #16
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fe3d 	bl	8005ad0 <xTaskRemoveFromEventList>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e5c:	4b3c      	ldr	r3, [pc, #240]	; (8004f50 <xQueueReceive+0x1b4>)
 8004e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e6c:	f001 fd5c 	bl	8006928 <vPortExitCritical>
				return pdPASS;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e069      	b.n	8004f48 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d103      	bne.n	8004e82 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e7a:	f001 fd55 	bl	8006928 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e062      	b.n	8004f48 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e88:	f107 0310 	add.w	r3, r7, #16
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fe81 	bl	8005b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e92:	2301      	movs	r3, #1
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e96:	f001 fd47 	bl	8006928 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e9a:	f000 fbfd 	bl	8005698 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e9e:	f001 fd15 	bl	80068cc <vPortEnterCritical>
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ea8:	b25b      	sxtb	r3, r3
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d103      	bne.n	8004eb8 <xQueueReceive+0x11c>
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ebe:	b25b      	sxtb	r3, r3
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d103      	bne.n	8004ece <xQueueReceive+0x132>
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ece:	f001 fd2b 	bl	8006928 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ed2:	1d3a      	adds	r2, r7, #4
 8004ed4:	f107 0310 	add.w	r3, r7, #16
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fe70 	bl	8005bc0 <xTaskCheckForTimeOut>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d123      	bne.n	8004f2e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee8:	f000 f916 	bl	8005118 <prvIsQueueEmpty>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d017      	beq.n	8004f22 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	3324      	adds	r3, #36	; 0x24
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4611      	mov	r1, r2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fd9a 	bl	8005a34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f02:	f000 f8b7 	bl	8005074 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f06:	f000 fbd5 	bl	80056b4 <xTaskResumeAll>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d189      	bne.n	8004e24 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <xQueueReceive+0x1b4>)
 8004f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f16:	601a      	str	r2, [r3, #0]
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	e780      	b.n	8004e24 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f24:	f000 f8a6 	bl	8005074 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f28:	f000 fbc4 	bl	80056b4 <xTaskResumeAll>
 8004f2c:	e77a      	b.n	8004e24 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f30:	f000 f8a0 	bl	8005074 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f34:	f000 fbbe 	bl	80056b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f3a:	f000 f8ed 	bl	8005118 <prvIsQueueEmpty>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f43f af6f 	beq.w	8004e24 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f46:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3730      	adds	r7, #48	; 0x30
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10d      	bne.n	8004f8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d14d      	bne.n	8005016 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 ff7a 	bl	8005e78 <xTaskPriorityDisinherit>
 8004f84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	e043      	b.n	8005016 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d119      	bne.n	8004fc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6858      	ldr	r0, [r3, #4]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	f001 ffa8 	bl	8006ef4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	441a      	add	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d32b      	bcc.n	8005016 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	e026      	b.n	8005016 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	68d8      	ldr	r0, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	68b9      	ldr	r1, [r7, #8]
 8004fd4:	f001 ff8e 	bl	8006ef4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	425b      	negs	r3, r3
 8004fe2:	441a      	add	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d207      	bcs.n	8005004 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	425b      	negs	r3, r3
 8004ffe:	441a      	add	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d105      	bne.n	8005016 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	3b01      	subs	r3, #1
 8005014:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800501e:	697b      	ldr	r3, [r7, #20]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d018      	beq.n	800506c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	441a      	add	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	d303      	bcc.n	800505c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68d9      	ldr	r1, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005064:	461a      	mov	r2, r3
 8005066:	6838      	ldr	r0, [r7, #0]
 8005068:	f001 ff44 	bl	8006ef4 <memcpy>
	}
}
 800506c:	bf00      	nop
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800507c:	f001 fc26 	bl	80068cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005086:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005088:	e011      	b.n	80050ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b00      	cmp	r3, #0
 8005090:	d012      	beq.n	80050b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3324      	adds	r3, #36	; 0x24
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fd1a 	bl	8005ad0 <xTaskRemoveFromEventList>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050a2:	f000 fded 	bl	8005c80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	dce9      	bgt.n	800508a <prvUnlockQueue+0x16>
 80050b6:	e000      	b.n	80050ba <prvUnlockQueue+0x46>
					break;
 80050b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050c2:	f001 fc31 	bl	8006928 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050c6:	f001 fc01 	bl	80068cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050d2:	e011      	b.n	80050f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d012      	beq.n	8005102 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3310      	adds	r3, #16
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fcf5 	bl	8005ad0 <xTaskRemoveFromEventList>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050ec:	f000 fdc8 	bl	8005c80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050f0:	7bbb      	ldrb	r3, [r7, #14]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	dce9      	bgt.n	80050d4 <prvUnlockQueue+0x60>
 8005100:	e000      	b.n	8005104 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005102:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	22ff      	movs	r2, #255	; 0xff
 8005108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800510c:	f001 fc0c 	bl	8006928 <vPortExitCritical>
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005120:	f001 fbd4 	bl	80068cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800512c:	2301      	movs	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	e001      	b.n	8005136 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005136:	f001 fbf7 	bl	8006928 <vPortExitCritical>

	return xReturn;
 800513a:	68fb      	ldr	r3, [r7, #12]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800514c:	f001 fbbe 	bl	80068cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	429a      	cmp	r2, r3
 800515a:	d102      	bne.n	8005162 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e001      	b.n	8005166 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005166:	f001 fbdf 	bl	8006928 <vPortExitCritical>

	return xReturn;
 800516a:	68fb      	ldr	r3, [r7, #12]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e014      	b.n	80051ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005184:	4a0e      	ldr	r2, [pc, #56]	; (80051c0 <vQueueAddToRegistry+0x4c>)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005190:	490b      	ldr	r1, [pc, #44]	; (80051c0 <vQueueAddToRegistry+0x4c>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <vQueueAddToRegistry+0x4c>)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	4413      	add	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051a6:	e005      	b.n	80051b4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b07      	cmp	r3, #7
 80051b2:	d9e7      	bls.n	8005184 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	20004a1c 	.word	0x20004a1c

080051c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051d4:	f001 fb7a 	bl	80068cc <vPortEnterCritical>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051de:	b25b      	sxtb	r3, r3
 80051e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e4:	d103      	bne.n	80051ee <vQueueWaitForMessageRestricted+0x2a>
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f4:	b25b      	sxtb	r3, r3
 80051f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fa:	d103      	bne.n	8005204 <vQueueWaitForMessageRestricted+0x40>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005204:	f001 fb90 	bl	8006928 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	3324      	adds	r3, #36	; 0x24
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fc2f 	bl	8005a7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800521e:	6978      	ldr	r0, [r7, #20]
 8005220:	f7ff ff28 	bl	8005074 <prvUnlockQueue>
	}
 8005224:	bf00      	nop
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08e      	sub	sp, #56	; 0x38
 8005230:	af04      	add	r7, sp, #16
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800523a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523c:	2b00      	cmp	r3, #0
 800523e:	d109      	bne.n	8005254 <xTaskCreateStatic+0x28>
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	e7fe      	b.n	8005252 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <xTaskCreateStatic+0x42>
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	61fb      	str	r3, [r7, #28]
 800526c:	e7fe      	b.n	800526c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800526e:	235c      	movs	r3, #92	; 0x5c
 8005270:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	2b5c      	cmp	r3, #92	; 0x5c
 8005276:	d009      	beq.n	800528c <xTaskCreateStatic+0x60>
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	e7fe      	b.n	800528a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800528c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01e      	beq.n	80052d2 <xTaskCreateStatic+0xa6>
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01b      	beq.n	80052d2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052ac:	2300      	movs	r3, #0
 80052ae:	9303      	str	r3, [sp, #12]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	9302      	str	r3, [sp, #8]
 80052b4:	f107 0314 	add.w	r3, r7, #20
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f850 	bl	800536a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052cc:	f000 f8dc 	bl	8005488 <prvAddNewTaskToReadyList>
 80052d0:	e001      	b.n	80052d6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052d6:	697b      	ldr	r3, [r7, #20]
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	3728      	adds	r7, #40	; 0x28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b08c      	sub	sp, #48	; 0x30
 80052e4:	af04      	add	r7, sp, #16
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	4613      	mov	r3, r2
 80052ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 fc03 	bl	8006b00 <pvPortMalloc>
 80052fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00e      	beq.n	8005320 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005302:	205c      	movs	r0, #92	; 0x5c
 8005304:	f001 fbfc 	bl	8006b00 <pvPortMalloc>
 8005308:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	631a      	str	r2, [r3, #48]	; 0x30
 8005316:	e005      	b.n	8005324 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005318:	6978      	ldr	r0, [r7, #20]
 800531a:	f001 fcb3 	bl	8006c84 <vPortFree>
 800531e:	e001      	b.n	8005324 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005320:	2300      	movs	r3, #0
 8005322:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d017      	beq.n	800535a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005332:	88fa      	ldrh	r2, [r7, #6]
 8005334:	2300      	movs	r3, #0
 8005336:	9303      	str	r3, [sp, #12]
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	9302      	str	r3, [sp, #8]
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f80e 	bl	800536a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800534e:	69f8      	ldr	r0, [r7, #28]
 8005350:	f000 f89a 	bl	8005488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005354:	2301      	movs	r3, #1
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	e002      	b.n	8005360 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005360:	69bb      	ldr	r3, [r7, #24]
	}
 8005362:	4618      	mov	r0, r3
 8005364:	3720      	adds	r7, #32
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b088      	sub	sp, #32
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	607a      	str	r2, [r7, #4]
 8005376:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	461a      	mov	r2, r3
 8005382:	21a5      	movs	r1, #165	; 0xa5
 8005384:	f001 fdc1 	bl	8006f0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005392:	3b01      	subs	r3, #1
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d009      	beq.n	80053c0 <prvInitialiseNewTask+0x56>
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e7fe      	b.n	80053be <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01f      	beq.n	8005406 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	e012      	b.n	80053f2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	7819      	ldrb	r1, [r3, #0]
 80053d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	3334      	adds	r3, #52	; 0x34
 80053dc:	460a      	mov	r2, r1
 80053de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d006      	beq.n	80053fa <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	3301      	adds	r3, #1
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b0f      	cmp	r3, #15
 80053f6:	d9e9      	bls.n	80053cc <prvInitialiseNewTask+0x62>
 80053f8:	e000      	b.n	80053fc <prvInitialiseNewTask+0x92>
			{
				break;
 80053fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005404:	e003      	b.n	800540e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	2b37      	cmp	r3, #55	; 0x37
 8005412:	d901      	bls.n	8005418 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005414:	2337      	movs	r3, #55	; 0x37
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005422:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	2200      	movs	r2, #0
 8005428:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	3304      	adds	r3, #4
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff f994 	bl	800475c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	3318      	adds	r3, #24
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff f98f 	bl	800475c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005442:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005452:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	2200      	movs	r2, #0
 8005458:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	68f9      	ldr	r1, [r7, #12]
 8005466:	69b8      	ldr	r0, [r7, #24]
 8005468:	f001 f90c 	bl	8006684 <pxPortInitialiseStack>
 800546c:	4602      	mov	r2, r0
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800547e:	bf00      	nop
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005490:	f001 fa1c 	bl	80068cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005494:	4b2d      	ldr	r3, [pc, #180]	; (800554c <prvAddNewTaskToReadyList+0xc4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	4a2c      	ldr	r2, [pc, #176]	; (800554c <prvAddNewTaskToReadyList+0xc4>)
 800549c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800549e:	4b2c      	ldr	r3, [pc, #176]	; (8005550 <prvAddNewTaskToReadyList+0xc8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80054a6:	4a2a      	ldr	r2, [pc, #168]	; (8005550 <prvAddNewTaskToReadyList+0xc8>)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80054ac:	4b27      	ldr	r3, [pc, #156]	; (800554c <prvAddNewTaskToReadyList+0xc4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d110      	bne.n	80054d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80054b4:	f000 fc08 	bl	8005cc8 <prvInitialiseTaskLists>
 80054b8:	e00d      	b.n	80054d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054ba:	4b26      	ldr	r3, [pc, #152]	; (8005554 <prvAddNewTaskToReadyList+0xcc>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d109      	bne.n	80054d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054c2:	4b23      	ldr	r3, [pc, #140]	; (8005550 <prvAddNewTaskToReadyList+0xc8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d802      	bhi.n	80054d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054d0:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <prvAddNewTaskToReadyList+0xc8>)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054d6:	4b20      	ldr	r3, [pc, #128]	; (8005558 <prvAddNewTaskToReadyList+0xd0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3301      	adds	r3, #1
 80054dc:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <prvAddNewTaskToReadyList+0xd0>)
 80054de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054e0:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <prvAddNewTaskToReadyList+0xd0>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	4b1b      	ldr	r3, [pc, #108]	; (800555c <prvAddNewTaskToReadyList+0xd4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d903      	bls.n	80054fc <prvAddNewTaskToReadyList+0x74>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	4a18      	ldr	r2, [pc, #96]	; (800555c <prvAddNewTaskToReadyList+0xd4>)
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4a15      	ldr	r2, [pc, #84]	; (8005560 <prvAddNewTaskToReadyList+0xd8>)
 800550a:	441a      	add	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f7ff f92f 	bl	8004776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005518:	f001 fa06 	bl	8006928 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800551c:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <prvAddNewTaskToReadyList+0xcc>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00e      	beq.n	8005542 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005524:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <prvAddNewTaskToReadyList+0xc8>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	429a      	cmp	r2, r3
 8005530:	d207      	bcs.n	8005542 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <prvAddNewTaskToReadyList+0xdc>)
 8005534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20000bc4 	.word	0x20000bc4
 8005550:	200006f0 	.word	0x200006f0
 8005554:	20000bd0 	.word	0x20000bd0
 8005558:	20000be0 	.word	0x20000be0
 800555c:	20000bcc 	.word	0x20000bcc
 8005560:	200006f4 	.word	0x200006f4
 8005564:	e000ed04 	.word	0xe000ed04

08005568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d016      	beq.n	80055a8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800557a:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <vTaskDelay+0x60>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <vTaskDelay+0x2e>
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60bb      	str	r3, [r7, #8]
 8005594:	e7fe      	b.n	8005594 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005596:	f000 f87f 	bl	8005698 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800559a:	2100      	movs	r1, #0
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fcd7 	bl	8005f50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80055a2:	f000 f887 	bl	80056b4 <xTaskResumeAll>
 80055a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d107      	bne.n	80055be <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80055ae:	4b07      	ldr	r3, [pc, #28]	; (80055cc <vTaskDelay+0x64>)
 80055b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000bec 	.word	0x20000bec
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055de:	463a      	mov	r2, r7
 80055e0:	1d39      	adds	r1, r7, #4
 80055e2:	f107 0308 	add.w	r3, r7, #8
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7ff f864 	bl	80046b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	9202      	str	r2, [sp, #8]
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	2300      	movs	r3, #0
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	2300      	movs	r3, #0
 80055fc:	460a      	mov	r2, r1
 80055fe:	4920      	ldr	r1, [pc, #128]	; (8005680 <vTaskStartScheduler+0xb0>)
 8005600:	4820      	ldr	r0, [pc, #128]	; (8005684 <vTaskStartScheduler+0xb4>)
 8005602:	f7ff fe13 	bl	800522c <xTaskCreateStatic>
 8005606:	4602      	mov	r2, r0
 8005608:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <vTaskStartScheduler+0xb8>)
 800560a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <vTaskStartScheduler+0xb8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005614:	2301      	movs	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e001      	b.n	800561e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d102      	bne.n	800562a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005624:	f000 fce8 	bl	8005ff8 <xTimerCreateTimerTask>
 8005628:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d115      	bne.n	800565c <vTaskStartScheduler+0x8c>
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <vTaskStartScheduler+0xbc>)
 8005644:	f04f 32ff 	mov.w	r2, #4294967295
 8005648:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800564a:	4b11      	ldr	r3, [pc, #68]	; (8005690 <vTaskStartScheduler+0xc0>)
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <vTaskStartScheduler+0xc4>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005656:	f001 f89b 	bl	8006790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800565a:	e00d      	b.n	8005678 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005662:	d109      	bne.n	8005678 <vTaskStartScheduler+0xa8>
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e7fe      	b.n	8005676 <vTaskStartScheduler+0xa6>
}
 8005678:	bf00      	nop
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	08006f50 	.word	0x08006f50
 8005684:	08005c99 	.word	0x08005c99
 8005688:	20000be8 	.word	0x20000be8
 800568c:	20000be4 	.word	0x20000be4
 8005690:	20000bd0 	.word	0x20000bd0
 8005694:	20000bc8 	.word	0x20000bc8

08005698 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800569c:	4b04      	ldr	r3, [pc, #16]	; (80056b0 <vTaskSuspendAll+0x18>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	4a03      	ldr	r2, [pc, #12]	; (80056b0 <vTaskSuspendAll+0x18>)
 80056a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80056a6:	bf00      	nop
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr
 80056b0:	20000bec 	.word	0x20000bec

080056b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056c2:	4b41      	ldr	r3, [pc, #260]	; (80057c8 <xTaskResumeAll+0x114>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d109      	bne.n	80056de <xTaskResumeAll+0x2a>
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	e7fe      	b.n	80056dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056de:	f001 f8f5 	bl	80068cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056e2:	4b39      	ldr	r3, [pc, #228]	; (80057c8 <xTaskResumeAll+0x114>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	4a37      	ldr	r2, [pc, #220]	; (80057c8 <xTaskResumeAll+0x114>)
 80056ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ec:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <xTaskResumeAll+0x114>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d162      	bne.n	80057ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056f4:	4b35      	ldr	r3, [pc, #212]	; (80057cc <xTaskResumeAll+0x118>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05e      	beq.n	80057ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056fc:	e02f      	b.n	800575e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056fe:	4b34      	ldr	r3, [pc, #208]	; (80057d0 <xTaskResumeAll+0x11c>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3318      	adds	r3, #24
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff f890 	bl	8004830 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3304      	adds	r3, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff f88b 	bl	8004830 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571e:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <xTaskResumeAll+0x120>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d903      	bls.n	800572e <xTaskResumeAll+0x7a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	4a2a      	ldr	r2, [pc, #168]	; (80057d4 <xTaskResumeAll+0x120>)
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4a27      	ldr	r2, [pc, #156]	; (80057d8 <xTaskResumeAll+0x124>)
 800573c:	441a      	add	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	3304      	adds	r3, #4
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f7ff f816 	bl	8004776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574e:	4b23      	ldr	r3, [pc, #140]	; (80057dc <xTaskResumeAll+0x128>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	429a      	cmp	r2, r3
 8005756:	d302      	bcc.n	800575e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005758:	4b21      	ldr	r3, [pc, #132]	; (80057e0 <xTaskResumeAll+0x12c>)
 800575a:	2201      	movs	r2, #1
 800575c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800575e:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <xTaskResumeAll+0x11c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1cb      	bne.n	80056fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800576c:	f000 fb46 	bl	8005dfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005770:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <xTaskResumeAll+0x130>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d010      	beq.n	800579e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800577c:	f000 f846 	bl	800580c <xTaskIncrementTick>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005786:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <xTaskResumeAll+0x12c>)
 8005788:	2201      	movs	r2, #1
 800578a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3b01      	subs	r3, #1
 8005790:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f1      	bne.n	800577c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <xTaskResumeAll+0x130>)
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800579e:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <xTaskResumeAll+0x12c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d009      	beq.n	80057ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80057a6:	2301      	movs	r3, #1
 80057a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80057aa:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <xTaskResumeAll+0x134>)
 80057ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057ba:	f001 f8b5 	bl	8006928 <vPortExitCritical>

	return xAlreadyYielded;
 80057be:	68bb      	ldr	r3, [r7, #8]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	20000bec 	.word	0x20000bec
 80057cc:	20000bc4 	.word	0x20000bc4
 80057d0:	20000b84 	.word	0x20000b84
 80057d4:	20000bcc 	.word	0x20000bcc
 80057d8:	200006f4 	.word	0x200006f4
 80057dc:	200006f0 	.word	0x200006f0
 80057e0:	20000bd8 	.word	0x20000bd8
 80057e4:	20000bd4 	.word	0x20000bd4
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <xTaskGetTickCount+0x1c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057f8:	687b      	ldr	r3, [r7, #4]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	20000bc8 	.word	0x20000bc8

0800580c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005816:	4b4e      	ldr	r3, [pc, #312]	; (8005950 <xTaskIncrementTick+0x144>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f040 8088 	bne.w	8005930 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005820:	4b4c      	ldr	r3, [pc, #304]	; (8005954 <xTaskIncrementTick+0x148>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3301      	adds	r3, #1
 8005826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005828:	4a4a      	ldr	r2, [pc, #296]	; (8005954 <xTaskIncrementTick+0x148>)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d11f      	bne.n	8005874 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005834:	4b48      	ldr	r3, [pc, #288]	; (8005958 <xTaskIncrementTick+0x14c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <xTaskIncrementTick+0x46>
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	e7fe      	b.n	8005850 <xTaskIncrementTick+0x44>
 8005852:	4b41      	ldr	r3, [pc, #260]	; (8005958 <xTaskIncrementTick+0x14c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	4b40      	ldr	r3, [pc, #256]	; (800595c <xTaskIncrementTick+0x150>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a3e      	ldr	r2, [pc, #248]	; (8005958 <xTaskIncrementTick+0x14c>)
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	4a3e      	ldr	r2, [pc, #248]	; (800595c <xTaskIncrementTick+0x150>)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	4b3e      	ldr	r3, [pc, #248]	; (8005960 <xTaskIncrementTick+0x154>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3301      	adds	r3, #1
 800586c:	4a3c      	ldr	r2, [pc, #240]	; (8005960 <xTaskIncrementTick+0x154>)
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	f000 fac4 	bl	8005dfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005874:	4b3b      	ldr	r3, [pc, #236]	; (8005964 <xTaskIncrementTick+0x158>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	429a      	cmp	r2, r3
 800587c:	d349      	bcc.n	8005912 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800587e:	4b36      	ldr	r3, [pc, #216]	; (8005958 <xTaskIncrementTick+0x14c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005888:	4b36      	ldr	r3, [pc, #216]	; (8005964 <xTaskIncrementTick+0x158>)
 800588a:	f04f 32ff 	mov.w	r2, #4294967295
 800588e:	601a      	str	r2, [r3, #0]
					break;
 8005890:	e03f      	b.n	8005912 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005892:	4b31      	ldr	r3, [pc, #196]	; (8005958 <xTaskIncrementTick+0x14c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d203      	bcs.n	80058b2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058aa:	4a2e      	ldr	r2, [pc, #184]	; (8005964 <xTaskIncrementTick+0x158>)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058b0:	e02f      	b.n	8005912 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe ffba 	bl	8004830 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	3318      	adds	r3, #24
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe ffb1 	bl	8004830 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d2:	4b25      	ldr	r3, [pc, #148]	; (8005968 <xTaskIncrementTick+0x15c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d903      	bls.n	80058e2 <xTaskIncrementTick+0xd6>
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	4a22      	ldr	r2, [pc, #136]	; (8005968 <xTaskIncrementTick+0x15c>)
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4a1f      	ldr	r2, [pc, #124]	; (800596c <xTaskIncrementTick+0x160>)
 80058f0:	441a      	add	r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	3304      	adds	r3, #4
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7fe ff3c 	bl	8004776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005902:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <xTaskIncrementTick+0x164>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	429a      	cmp	r2, r3
 800590a:	d3b8      	bcc.n	800587e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800590c:	2301      	movs	r3, #1
 800590e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005910:	e7b5      	b.n	800587e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005912:	4b17      	ldr	r3, [pc, #92]	; (8005970 <xTaskIncrementTick+0x164>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005918:	4914      	ldr	r1, [pc, #80]	; (800596c <xTaskIncrementTick+0x160>)
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	440b      	add	r3, r1
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d907      	bls.n	800593a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800592a:	2301      	movs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	e004      	b.n	800593a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005930:	4b10      	ldr	r3, [pc, #64]	; (8005974 <xTaskIncrementTick+0x168>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	4a0f      	ldr	r2, [pc, #60]	; (8005974 <xTaskIncrementTick+0x168>)
 8005938:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800593a:	4b0f      	ldr	r3, [pc, #60]	; (8005978 <xTaskIncrementTick+0x16c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005942:	2301      	movs	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005946:	697b      	ldr	r3, [r7, #20]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000bec 	.word	0x20000bec
 8005954:	20000bc8 	.word	0x20000bc8
 8005958:	20000b7c 	.word	0x20000b7c
 800595c:	20000b80 	.word	0x20000b80
 8005960:	20000bdc 	.word	0x20000bdc
 8005964:	20000be4 	.word	0x20000be4
 8005968:	20000bcc 	.word	0x20000bcc
 800596c:	200006f4 	.word	0x200006f4
 8005970:	200006f0 	.word	0x200006f0
 8005974:	20000bd4 	.word	0x20000bd4
 8005978:	20000bd8 	.word	0x20000bd8

0800597c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005982:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <vTaskSwitchContext+0xa4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800598a:	4b26      	ldr	r3, [pc, #152]	; (8005a24 <vTaskSwitchContext+0xa8>)
 800598c:	2201      	movs	r2, #1
 800598e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005990:	e040      	b.n	8005a14 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005992:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <vTaskSwitchContext+0xa8>)
 8005994:	2200      	movs	r2, #0
 8005996:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005998:	4b23      	ldr	r3, [pc, #140]	; (8005a28 <vTaskSwitchContext+0xac>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	e00f      	b.n	80059c0 <vTaskSwitchContext+0x44>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <vTaskSwitchContext+0x3e>
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	e7fe      	b.n	80059b8 <vTaskSwitchContext+0x3c>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3b01      	subs	r3, #1
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	491a      	ldr	r1, [pc, #104]	; (8005a2c <vTaskSwitchContext+0xb0>)
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0e5      	beq.n	80059a0 <vTaskSwitchContext+0x24>
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <vTaskSwitchContext+0xb0>)
 80059e0:	4413      	add	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	605a      	str	r2, [r3, #4]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	3308      	adds	r3, #8
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d104      	bne.n	8005a04 <vTaskSwitchContext+0x88>
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	605a      	str	r2, [r3, #4]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <vTaskSwitchContext+0xb4>)
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	4a06      	ldr	r2, [pc, #24]	; (8005a28 <vTaskSwitchContext+0xac>)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6013      	str	r3, [r2, #0]
}
 8005a14:	bf00      	nop
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000bec 	.word	0x20000bec
 8005a24:	20000bd8 	.word	0x20000bd8
 8005a28:	20000bcc 	.word	0x20000bcc
 8005a2c:	200006f4 	.word	0x200006f4
 8005a30:	200006f0 	.word	0x200006f0

08005a34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <vTaskPlaceOnEventList+0x24>
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e7fe      	b.n	8005a56 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a58:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <vTaskPlaceOnEventList+0x44>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3318      	adds	r3, #24
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fe feac 	bl	80047be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a66:	2101      	movs	r1, #1
 8005a68:	6838      	ldr	r0, [r7, #0]
 8005a6a:	f000 fa71 	bl	8005f50 <prvAddCurrentTaskToDelayedList>
}
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	200006f0 	.word	0x200006f0

08005a7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d109      	bne.n	8005aa2 <vTaskPlaceOnEventListRestricted+0x26>
 8005a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e7fe      	b.n	8005aa0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aa2:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <vTaskPlaceOnEventListRestricted+0x50>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3318      	adds	r3, #24
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7fe fe63 	bl	8004776 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	68b8      	ldr	r0, [r7, #8]
 8005ac0:	f000 fa46 	bl	8005f50 <prvAddCurrentTaskToDelayedList>
	}
 8005ac4:	bf00      	nop
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	200006f0 	.word	0x200006f0

08005ad0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <xTaskRemoveFromEventList+0x2a>
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	e7fe      	b.n	8005af8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	3318      	adds	r3, #24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fe96 	bl	8004830 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b04:	4b1d      	ldr	r3, [pc, #116]	; (8005b7c <xTaskRemoveFromEventList+0xac>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d11d      	bne.n	8005b48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe fe8d 	bl	8004830 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <xTaskRemoveFromEventList+0xb0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d903      	bls.n	8005b2a <xTaskRemoveFromEventList+0x5a>
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <xTaskRemoveFromEventList+0xb0>)
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <xTaskRemoveFromEventList+0xb4>)
 8005b38:	441a      	add	r2, r3
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7fe fe18 	bl	8004776 <vListInsertEnd>
 8005b46:	e005      	b.n	8005b54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	480e      	ldr	r0, [pc, #56]	; (8005b88 <xTaskRemoveFromEventList+0xb8>)
 8005b50:	f7fe fe11 	bl	8004776 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <xTaskRemoveFromEventList+0xbc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d905      	bls.n	8005b6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b62:	2301      	movs	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b66:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <xTaskRemoveFromEventList+0xc0>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e001      	b.n	8005b72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b72:	697b      	ldr	r3, [r7, #20]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000bec 	.word	0x20000bec
 8005b80:	20000bcc 	.word	0x20000bcc
 8005b84:	200006f4 	.word	0x200006f4
 8005b88:	20000b84 	.word	0x20000b84
 8005b8c:	200006f0 	.word	0x200006f0
 8005b90:	20000bd8 	.word	0x20000bd8

08005b94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b9c:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <vTaskInternalSetTimeOutState+0x24>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <vTaskInternalSetTimeOutState+0x28>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	605a      	str	r2, [r3, #4]
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	20000bdc 	.word	0x20000bdc
 8005bbc:	20000bc8 	.word	0x20000bc8

08005bc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d109      	bne.n	8005be4 <xTaskCheckForTimeOut+0x24>
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	613b      	str	r3, [r7, #16]
 8005be2:	e7fe      	b.n	8005be2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <xTaskCheckForTimeOut+0x3e>
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	e7fe      	b.n	8005bfc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005bfe:	f000 fe65 	bl	80068cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c02:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <xTaskCheckForTimeOut+0xb8>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1a:	d102      	bne.n	8005c22 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	e023      	b.n	8005c6a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b15      	ldr	r3, [pc, #84]	; (8005c7c <xTaskCheckForTimeOut+0xbc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d007      	beq.n	8005c3e <xTaskCheckForTimeOut+0x7e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d302      	bcc.n	8005c3e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e015      	b.n	8005c6a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d20b      	bcs.n	8005c60 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	1ad2      	subs	r2, r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff ff9d 	bl	8005b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61fb      	str	r3, [r7, #28]
 8005c5e:	e004      	b.n	8005c6a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c66:	2301      	movs	r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c6a:	f000 fe5d 	bl	8006928 <vPortExitCritical>

	return xReturn;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000bc8 	.word	0x20000bc8
 8005c7c:	20000bdc 	.word	0x20000bdc

08005c80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c84:	4b03      	ldr	r3, [pc, #12]	; (8005c94 <vTaskMissedYield+0x14>)
 8005c86:	2201      	movs	r2, #1
 8005c88:	601a      	str	r2, [r3, #0]
}
 8005c8a:	bf00      	nop
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	20000bd8 	.word	0x20000bd8

08005c98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ca0:	f000 f852 	bl	8005d48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <prvIdleTask+0x28>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d9f9      	bls.n	8005ca0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <prvIdleTask+0x2c>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cbc:	e7f0      	b.n	8005ca0 <prvIdleTask+0x8>
 8005cbe:	bf00      	nop
 8005cc0:	200006f4 	.word	0x200006f4
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cce:	2300      	movs	r3, #0
 8005cd0:	607b      	str	r3, [r7, #4]
 8005cd2:	e00c      	b.n	8005cee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <prvInitialiseTaskLists+0x60>)
 8005ce0:	4413      	add	r3, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fd1a 	bl	800471c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3301      	adds	r3, #1
 8005cec:	607b      	str	r3, [r7, #4]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b37      	cmp	r3, #55	; 0x37
 8005cf2:	d9ef      	bls.n	8005cd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cf4:	480d      	ldr	r0, [pc, #52]	; (8005d2c <prvInitialiseTaskLists+0x64>)
 8005cf6:	f7fe fd11 	bl	800471c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cfa:	480d      	ldr	r0, [pc, #52]	; (8005d30 <prvInitialiseTaskLists+0x68>)
 8005cfc:	f7fe fd0e 	bl	800471c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d00:	480c      	ldr	r0, [pc, #48]	; (8005d34 <prvInitialiseTaskLists+0x6c>)
 8005d02:	f7fe fd0b 	bl	800471c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d06:	480c      	ldr	r0, [pc, #48]	; (8005d38 <prvInitialiseTaskLists+0x70>)
 8005d08:	f7fe fd08 	bl	800471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d0c:	480b      	ldr	r0, [pc, #44]	; (8005d3c <prvInitialiseTaskLists+0x74>)
 8005d0e:	f7fe fd05 	bl	800471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d12:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <prvInitialiseTaskLists+0x78>)
 8005d14:	4a05      	ldr	r2, [pc, #20]	; (8005d2c <prvInitialiseTaskLists+0x64>)
 8005d16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <prvInitialiseTaskLists+0x7c>)
 8005d1a:	4a05      	ldr	r2, [pc, #20]	; (8005d30 <prvInitialiseTaskLists+0x68>)
 8005d1c:	601a      	str	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	200006f4 	.word	0x200006f4
 8005d2c:	20000b54 	.word	0x20000b54
 8005d30:	20000b68 	.word	0x20000b68
 8005d34:	20000b84 	.word	0x20000b84
 8005d38:	20000b98 	.word	0x20000b98
 8005d3c:	20000bb0 	.word	0x20000bb0
 8005d40:	20000b7c 	.word	0x20000b7c
 8005d44:	20000b80 	.word	0x20000b80

08005d48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d4e:	e019      	b.n	8005d84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d50:	f000 fdbc 	bl	80068cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d54:	4b0f      	ldr	r3, [pc, #60]	; (8005d94 <prvCheckTasksWaitingTermination+0x4c>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe fd65 	bl	8004830 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <prvCheckTasksWaitingTermination+0x50>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <prvCheckTasksWaitingTermination+0x50>)
 8005d6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <prvCheckTasksWaitingTermination+0x54>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	4a09      	ldr	r2, [pc, #36]	; (8005d9c <prvCheckTasksWaitingTermination+0x54>)
 8005d78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d7a:	f000 fdd5 	bl	8006928 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f80e 	bl	8005da0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <prvCheckTasksWaitingTermination+0x54>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e1      	bne.n	8005d50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000b98 	.word	0x20000b98
 8005d98:	20000bc4 	.word	0x20000bc4
 8005d9c:	20000bac 	.word	0x20000bac

08005da0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d108      	bne.n	8005dc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 ff64 	bl	8006c84 <vPortFree>
				vPortFree( pxTCB );
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 ff61 	bl	8006c84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dc2:	e017      	b.n	8005df4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d103      	bne.n	8005dd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 ff58 	bl	8006c84 <vPortFree>
	}
 8005dd4:	e00e      	b.n	8005df4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d009      	beq.n	8005df4 <prvDeleteTCB+0x54>
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	e7fe      	b.n	8005df2 <prvDeleteTCB+0x52>
	}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e02:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <prvResetNextTaskUnblockTime+0x38>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d104      	bne.n	8005e16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <prvResetNextTaskUnblockTime+0x3c>)
 8005e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e14:	e008      	b.n	8005e28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e16:	4b07      	ldr	r3, [pc, #28]	; (8005e34 <prvResetNextTaskUnblockTime+0x38>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	4a04      	ldr	r2, [pc, #16]	; (8005e38 <prvResetNextTaskUnblockTime+0x3c>)
 8005e26:	6013      	str	r3, [r2, #0]
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20000b7c 	.word	0x20000b7c
 8005e38:	20000be4 	.word	0x20000be4

08005e3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <xTaskGetSchedulerState+0x34>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	607b      	str	r3, [r7, #4]
 8005e4e:	e008      	b.n	8005e62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e50:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <xTaskGetSchedulerState+0x38>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d102      	bne.n	8005e5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	607b      	str	r3, [r7, #4]
 8005e5c:	e001      	b.n	8005e62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e62:	687b      	ldr	r3, [r7, #4]
	}
 8005e64:	4618      	mov	r0, r3
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	20000bd0 	.word	0x20000bd0
 8005e74:	20000bec 	.word	0x20000bec

08005e78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d054      	beq.n	8005f38 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e8e:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <xTaskPriorityDisinherit+0xcc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d009      	beq.n	8005eac <xTaskPriorityDisinherit+0x34>
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e7fe      	b.n	8005eaa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d109      	bne.n	8005ec8 <xTaskPriorityDisinherit+0x50>
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	e7fe      	b.n	8005ec6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ecc:	1e5a      	subs	r2, r3, #1
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d02c      	beq.n	8005f38 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d128      	bne.n	8005f38 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fe fca0 	bl	8004830 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f08:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <xTaskPriorityDisinherit+0xd0>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d903      	bls.n	8005f18 <xTaskPriorityDisinherit+0xa0>
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <xTaskPriorityDisinherit+0xd0>)
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <xTaskPriorityDisinherit+0xd4>)
 8005f26:	441a      	add	r2, r3
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f7fe fc21 	bl	8004776 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f34:	2301      	movs	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f38:	697b      	ldr	r3, [r7, #20]
	}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	200006f0 	.word	0x200006f0
 8005f48:	20000bcc 	.word	0x20000bcc
 8005f4c:	200006f4 	.word	0x200006f4

08005f50 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f5a:	4b21      	ldr	r3, [pc, #132]	; (8005fe0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f60:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe fc62 	bl	8004830 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	d10a      	bne.n	8005f8a <prvAddCurrentTaskToDelayedList+0x3a>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4819      	ldr	r0, [pc, #100]	; (8005fe8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f84:	f7fe fbf7 	bl	8004776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f88:	e026      	b.n	8005fd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d209      	bcs.n	8005fb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fa2:	4b12      	ldr	r3, [pc, #72]	; (8005fec <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4619      	mov	r1, r3
 8005fae:	4610      	mov	r0, r2
 8005fb0:	f7fe fc05 	bl	80047be <vListInsert>
}
 8005fb4:	e010      	b.n	8005fd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe fbfb 	bl	80047be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d202      	bcs.n	8005fd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fd2:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	6013      	str	r3, [r2, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000bc8 	.word	0x20000bc8
 8005fe4:	200006f0 	.word	0x200006f0
 8005fe8:	20000bb0 	.word	0x20000bb0
 8005fec:	20000b80 	.word	0x20000b80
 8005ff0:	20000b7c 	.word	0x20000b7c
 8005ff4:	20000be4 	.word	0x20000be4

08005ff8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006002:	f000 faff 	bl	8006604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006006:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <xTimerCreateTimerTask+0x80>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d021      	beq.n	8006052 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006016:	1d3a      	adds	r2, r7, #4
 8006018:	f107 0108 	add.w	r1, r7, #8
 800601c:	f107 030c 	add.w	r3, r7, #12
 8006020:	4618      	mov	r0, r3
 8006022:	f7fe fb61 	bl	80046e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	9202      	str	r2, [sp, #8]
 800602e:	9301      	str	r3, [sp, #4]
 8006030:	2302      	movs	r3, #2
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	460a      	mov	r2, r1
 8006038:	4910      	ldr	r1, [pc, #64]	; (800607c <xTimerCreateTimerTask+0x84>)
 800603a:	4811      	ldr	r0, [pc, #68]	; (8006080 <xTimerCreateTimerTask+0x88>)
 800603c:	f7ff f8f6 	bl	800522c <xTaskCreateStatic>
 8006040:	4602      	mov	r2, r0
 8006042:	4b10      	ldr	r3, [pc, #64]	; (8006084 <xTimerCreateTimerTask+0x8c>)
 8006044:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006046:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <xTimerCreateTimerTask+0x8c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800604e:	2301      	movs	r3, #1
 8006050:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <xTimerCreateTimerTask+0x74>
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e7fe      	b.n	800606a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800606c:	697b      	ldr	r3, [r7, #20]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000c20 	.word	0x20000c20
 800607c:	08006f58 	.word	0x08006f58
 8006080:	080061b9 	.word	0x080061b9
 8006084:	20000c24 	.word	0x20000c24

08006088 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	; 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <xTimerGenericCommand+0x2c>
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	e7fe      	b.n	80060b2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060b4:	4b19      	ldr	r3, [pc, #100]	; (800611c <xTimerGenericCommand+0x94>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d02a      	beq.n	8006112 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	dc18      	bgt.n	8006100 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060ce:	f7ff feb5 	bl	8005e3c <xTaskGetSchedulerState>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d109      	bne.n	80060ec <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060d8:	4b10      	ldr	r3, [pc, #64]	; (800611c <xTimerGenericCommand+0x94>)
 80060da:	6818      	ldr	r0, [r3, #0]
 80060dc:	f107 0110 	add.w	r1, r7, #16
 80060e0:	2300      	movs	r3, #0
 80060e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e4:	f7fe fccc 	bl	8004a80 <xQueueGenericSend>
 80060e8:	6278      	str	r0, [r7, #36]	; 0x24
 80060ea:	e012      	b.n	8006112 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060ec:	4b0b      	ldr	r3, [pc, #44]	; (800611c <xTimerGenericCommand+0x94>)
 80060ee:	6818      	ldr	r0, [r3, #0]
 80060f0:	f107 0110 	add.w	r1, r7, #16
 80060f4:	2300      	movs	r3, #0
 80060f6:	2200      	movs	r2, #0
 80060f8:	f7fe fcc2 	bl	8004a80 <xQueueGenericSend>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24
 80060fe:	e008      	b.n	8006112 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006100:	4b06      	ldr	r3, [pc, #24]	; (800611c <xTimerGenericCommand+0x94>)
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	f107 0110 	add.w	r1, r7, #16
 8006108:	2300      	movs	r3, #0
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	f7fe fdb2 	bl	8004c74 <xQueueGenericSendFromISR>
 8006110:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006114:	4618      	mov	r0, r3
 8006116:	3728      	adds	r7, #40	; 0x28
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000c20 	.word	0x20000c20

08006120 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af02      	add	r7, sp, #8
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800612a:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <prvProcessExpiredTimer+0x94>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	3304      	adds	r3, #4
 8006138:	4618      	mov	r0, r3
 800613a:	f7fe fb79 	bl	8004830 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b00      	cmp	r3, #0
 800614a:	d021      	beq.n	8006190 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	18d1      	adds	r1, r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	6978      	ldr	r0, [r7, #20]
 800615a:	f000 f8d1 	bl	8006300 <prvInsertTimerInActiveList>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01e      	beq.n	80061a2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006164:	2300      	movs	r3, #0
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	2300      	movs	r3, #0
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	2100      	movs	r1, #0
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f7ff ff8a 	bl	8006088 <xTimerGenericCommand>
 8006174:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d112      	bne.n	80061a2 <prvProcessExpiredTimer+0x82>
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	e7fe      	b.n	800618e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	b2da      	uxtb	r2, r3
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	6978      	ldr	r0, [r7, #20]
 80061a8:	4798      	blx	r3
}
 80061aa:	bf00      	nop
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000c18 	.word	0x20000c18

080061b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f857 	bl	8006278 <prvGetNextExpireTime>
 80061ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4619      	mov	r1, r3
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 f803 	bl	80061dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061d6:	f000 f8d5 	bl	8006384 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061da:	e7f1      	b.n	80061c0 <prvTimerTask+0x8>

080061dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061e6:	f7ff fa57 	bl	8005698 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061ea:	f107 0308 	add.w	r3, r7, #8
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f866 	bl	80062c0 <prvSampleTimeNow>
 80061f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d130      	bne.n	800625e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <prvProcessTimerOrBlockTask+0x3c>
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	429a      	cmp	r2, r3
 8006208:	d806      	bhi.n	8006218 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800620a:	f7ff fa53 	bl	80056b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800620e:	68f9      	ldr	r1, [r7, #12]
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff ff85 	bl	8006120 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006216:	e024      	b.n	8006262 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d008      	beq.n	8006230 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800621e:	4b13      	ldr	r3, [pc, #76]	; (800626c <prvProcessTimerOrBlockTask+0x90>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <prvProcessTimerOrBlockTask+0x50>
 8006228:	2301      	movs	r3, #1
 800622a:	e000      	b.n	800622e <prvProcessTimerOrBlockTask+0x52>
 800622c:	2300      	movs	r3, #0
 800622e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <prvProcessTimerOrBlockTask+0x94>)
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	4619      	mov	r1, r3
 800623e:	f7fe ffc1 	bl	80051c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006242:	f7ff fa37 	bl	80056b4 <xTaskResumeAll>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <prvProcessTimerOrBlockTask+0x98>)
 800624e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	f3bf 8f6f 	isb	sy
}
 800625c:	e001      	b.n	8006262 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800625e:	f7ff fa29 	bl	80056b4 <xTaskResumeAll>
}
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000c1c 	.word	0x20000c1c
 8006270:	20000c20 	.word	0x20000c20
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006280:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <prvGetNextExpireTime+0x44>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <prvGetNextExpireTime+0x16>
 800628a:	2201      	movs	r2, #1
 800628c:	e000      	b.n	8006290 <prvGetNextExpireTime+0x18>
 800628e:	2200      	movs	r2, #0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800629c:	4b07      	ldr	r3, [pc, #28]	; (80062bc <prvGetNextExpireTime+0x44>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e001      	b.n	80062ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062ac:	68fb      	ldr	r3, [r7, #12]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000c18 	.word	0x20000c18

080062c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062c8:	f7ff fa90 	bl	80057ec <xTaskGetTickCount>
 80062cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062ce:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <prvSampleTimeNow+0x3c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d205      	bcs.n	80062e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062d8:	f000 f930 	bl	800653c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e002      	b.n	80062ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062ea:	4a04      	ldr	r2, [pc, #16]	; (80062fc <prvSampleTimeNow+0x3c>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000c28 	.word	0x20000c28

08006300 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d812      	bhi.n	800634c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	429a      	cmp	r2, r3
 8006332:	d302      	bcc.n	800633a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006334:	2301      	movs	r3, #1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e01b      	b.n	8006372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800633a:	4b10      	ldr	r3, [pc, #64]	; (800637c <prvInsertTimerInActiveList+0x7c>)
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3304      	adds	r3, #4
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f7fe fa3a 	bl	80047be <vListInsert>
 800634a:	e012      	b.n	8006372 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d206      	bcs.n	8006362 <prvInsertTimerInActiveList+0x62>
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d302      	bcc.n	8006362 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800635c:	2301      	movs	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	e007      	b.n	8006372 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <prvInsertTimerInActiveList+0x80>)
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3304      	adds	r3, #4
 800636a:	4619      	mov	r1, r3
 800636c:	4610      	mov	r0, r2
 800636e:	f7fe fa26 	bl	80047be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006372:	697b      	ldr	r3, [r7, #20]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000c1c 	.word	0x20000c1c
 8006380:	20000c18 	.word	0x20000c18

08006384 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b08e      	sub	sp, #56	; 0x38
 8006388:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800638a:	e0c6      	b.n	800651a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	da17      	bge.n	80063c2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006392:	1d3b      	adds	r3, r7, #4
 8006394:	3304      	adds	r3, #4
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <prvProcessReceivedCommands+0x2e>
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	61fb      	str	r3, [r7, #28]
 80063b0:	e7fe      	b.n	80063b0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b8:	6850      	ldr	r0, [r2, #4]
 80063ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063bc:	6892      	ldr	r2, [r2, #8]
 80063be:	4611      	mov	r1, r2
 80063c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f2c0 80a7 	blt.w	8006518 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d004      	beq.n	80063e0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d8:	3304      	adds	r3, #4
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fa28 	bl	8004830 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063e0:	463b      	mov	r3, r7
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff ff6c 	bl	80062c0 <prvSampleTimeNow>
 80063e8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b09      	cmp	r3, #9
 80063ee:	f200 8094 	bhi.w	800651a <prvProcessReceivedCommands+0x196>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <prvProcessReceivedCommands+0x74>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006421 	.word	0x08006421
 80063fc:	08006421 	.word	0x08006421
 8006400:	08006421 	.word	0x08006421
 8006404:	08006493 	.word	0x08006493
 8006408:	080064a7 	.word	0x080064a7
 800640c:	080064ef 	.word	0x080064ef
 8006410:	08006421 	.word	0x08006421
 8006414:	08006421 	.word	0x08006421
 8006418:	08006493 	.word	0x08006493
 800641c:	080064a7 	.word	0x080064a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	b2da      	uxtb	r2, r3
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	18d1      	adds	r1, r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006440:	f7ff ff5e 	bl	8006300 <prvInsertTimerInActiveList>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d067      	beq.n	800651a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006450:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d05c      	beq.n	800651a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	441a      	add	r2, r3
 8006468:	2300      	movs	r3, #0
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2300      	movs	r3, #0
 800646e:	2100      	movs	r1, #0
 8006470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006472:	f7ff fe09 	bl	8006088 <xTimerGenericCommand>
 8006476:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d14d      	bne.n	800651a <prvProcessReceivedCommands+0x196>
 800647e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e7fe      	b.n	8006490 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	b2da      	uxtb	r2, r3
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80064a4:	e039      	b.n	800651a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <prvProcessReceivedCommands+0x156>
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e7fe      	b.n	80064d8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	699a      	ldr	r2, [r3, #24]
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	18d1      	adds	r1, r2, r3
 80064e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e8:	f7ff ff0a 	bl	8006300 <prvInsertTimerInActiveList>
					break;
 80064ec:	e015      	b.n	800651a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d103      	bne.n	8006504 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80064fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fe:	f000 fbc1 	bl	8006c84 <vPortFree>
 8006502:	e00a      	b.n	800651a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	b2da      	uxtb	r2, r3
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006516:	e000      	b.n	800651a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006518:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800651a:	4b07      	ldr	r3, [pc, #28]	; (8006538 <prvProcessReceivedCommands+0x1b4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	1d39      	adds	r1, r7, #4
 8006520:	2200      	movs	r2, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fc3a 	bl	8004d9c <xQueueReceive>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	f47f af2e 	bne.w	800638c <prvProcessReceivedCommands+0x8>
	}
}
 8006530:	bf00      	nop
 8006532:	3730      	adds	r7, #48	; 0x30
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000c20 	.word	0x20000c20

0800653c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006542:	e047      	b.n	80065d4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006544:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <prvSwitchTimerLists+0xc0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800654e:	4b2b      	ldr	r3, [pc, #172]	; (80065fc <prvSwitchTimerLists+0xc0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3304      	adds	r3, #4
 800655c:	4618      	mov	r0, r3
 800655e:	f7fe f967 	bl	8004830 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d02d      	beq.n	80065d4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	429a      	cmp	r2, r3
 8006588:	d90e      	bls.n	80065a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006596:	4b19      	ldr	r3, [pc, #100]	; (80065fc <prvSwitchTimerLists+0xc0>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3304      	adds	r3, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4610      	mov	r0, r2
 80065a2:	f7fe f90c 	bl	80047be <vListInsert>
 80065a6:	e015      	b.n	80065d4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065a8:	2300      	movs	r3, #0
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	2300      	movs	r3, #0
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	2100      	movs	r1, #0
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff fd68 	bl	8006088 <xTimerGenericCommand>
 80065b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d109      	bne.n	80065d4 <prvSwitchTimerLists+0x98>
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	e7fe      	b.n	80065d2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065d4:	4b09      	ldr	r3, [pc, #36]	; (80065fc <prvSwitchTimerLists+0xc0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1b2      	bne.n	8006544 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065de:	4b07      	ldr	r3, [pc, #28]	; (80065fc <prvSwitchTimerLists+0xc0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <prvSwitchTimerLists+0xc4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a04      	ldr	r2, [pc, #16]	; (80065fc <prvSwitchTimerLists+0xc0>)
 80065ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065ec:	4a04      	ldr	r2, [pc, #16]	; (8006600 <prvSwitchTimerLists+0xc4>)
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	6013      	str	r3, [r2, #0]
}
 80065f2:	bf00      	nop
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000c18 	.word	0x20000c18
 8006600:	20000c1c 	.word	0x20000c1c

08006604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800660a:	f000 f95f 	bl	80068cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800660e:	4b15      	ldr	r3, [pc, #84]	; (8006664 <prvCheckForValidListAndQueue+0x60>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d120      	bne.n	8006658 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006616:	4814      	ldr	r0, [pc, #80]	; (8006668 <prvCheckForValidListAndQueue+0x64>)
 8006618:	f7fe f880 	bl	800471c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800661c:	4813      	ldr	r0, [pc, #76]	; (800666c <prvCheckForValidListAndQueue+0x68>)
 800661e:	f7fe f87d 	bl	800471c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006622:	4b13      	ldr	r3, [pc, #76]	; (8006670 <prvCheckForValidListAndQueue+0x6c>)
 8006624:	4a10      	ldr	r2, [pc, #64]	; (8006668 <prvCheckForValidListAndQueue+0x64>)
 8006626:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006628:	4b12      	ldr	r3, [pc, #72]	; (8006674 <prvCheckForValidListAndQueue+0x70>)
 800662a:	4a10      	ldr	r2, [pc, #64]	; (800666c <prvCheckForValidListAndQueue+0x68>)
 800662c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800662e:	2300      	movs	r3, #0
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <prvCheckForValidListAndQueue+0x74>)
 8006634:	4a11      	ldr	r2, [pc, #68]	; (800667c <prvCheckForValidListAndQueue+0x78>)
 8006636:	2110      	movs	r1, #16
 8006638:	200a      	movs	r0, #10
 800663a:	f7fe f98b 	bl	8004954 <xQueueGenericCreateStatic>
 800663e:	4602      	mov	r2, r0
 8006640:	4b08      	ldr	r3, [pc, #32]	; (8006664 <prvCheckForValidListAndQueue+0x60>)
 8006642:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006644:	4b07      	ldr	r3, [pc, #28]	; (8006664 <prvCheckForValidListAndQueue+0x60>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <prvCheckForValidListAndQueue+0x60>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	490b      	ldr	r1, [pc, #44]	; (8006680 <prvCheckForValidListAndQueue+0x7c>)
 8006652:	4618      	mov	r0, r3
 8006654:	f7fe fd8e 	bl	8005174 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006658:	f000 f966 	bl	8006928 <vPortExitCritical>
}
 800665c:	bf00      	nop
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20000c20 	.word	0x20000c20
 8006668:	20000bf0 	.word	0x20000bf0
 800666c:	20000c04 	.word	0x20000c04
 8006670:	20000c18 	.word	0x20000c18
 8006674:	20000c1c 	.word	0x20000c1c
 8006678:	20000ccc 	.word	0x20000ccc
 800667c:	20000c2c 	.word	0x20000c2c
 8006680:	08006f60 	.word	0x08006f60

08006684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3b04      	subs	r3, #4
 8006694:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800669c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b04      	subs	r3, #4
 80066a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f023 0201 	bic.w	r2, r3, #1
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3b04      	subs	r3, #4
 80066b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066b4:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <pxPortInitialiseStack+0x64>)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3b14      	subs	r3, #20
 80066be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3b04      	subs	r3, #4
 80066ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f06f 0202 	mvn.w	r2, #2
 80066d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3b20      	subs	r3, #32
 80066d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066da:	68fb      	ldr	r3, [r7, #12]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	080066ed 	.word	0x080066ed

080066ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066f6:	4b11      	ldr	r3, [pc, #68]	; (800673c <prvTaskExitError+0x50>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d009      	beq.n	8006714 <prvTaskExitError+0x28>
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e7fe      	b.n	8006712 <prvTaskExitError+0x26>
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006726:	bf00      	nop
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0fc      	beq.n	8006728 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800672e:	bf00      	nop
 8006730:	3714      	adds	r7, #20
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	20000014 	.word	0x20000014

08006740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <pxCurrentTCBConst2>)
 8006742:	6819      	ldr	r1, [r3, #0]
 8006744:	6808      	ldr	r0, [r1, #0]
 8006746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674a:	f380 8809 	msr	PSP, r0
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8811 	msr	BASEPRI, r0
 800675a:	4770      	bx	lr
 800675c:	f3af 8000 	nop.w

08006760 <pxCurrentTCBConst2>:
 8006760:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop

08006768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006768:	4808      	ldr	r0, [pc, #32]	; (800678c <prvPortStartFirstTask+0x24>)
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	6800      	ldr	r0, [r0, #0]
 800676e:	f380 8808 	msr	MSP, r0
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8814 	msr	CONTROL, r0
 800677a:	b662      	cpsie	i
 800677c:	b661      	cpsie	f
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	df00      	svc	0
 8006788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800678a:	bf00      	nop
 800678c:	e000ed08 	.word	0xe000ed08

08006790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006796:	4b44      	ldr	r3, [pc, #272]	; (80068a8 <xPortStartScheduler+0x118>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a44      	ldr	r2, [pc, #272]	; (80068ac <xPortStartScheduler+0x11c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d109      	bne.n	80067b4 <xPortStartScheduler+0x24>
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	e7fe      	b.n	80067b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067b4:	4b3c      	ldr	r3, [pc, #240]	; (80068a8 <xPortStartScheduler+0x118>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a3d      	ldr	r2, [pc, #244]	; (80068b0 <xPortStartScheduler+0x120>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d109      	bne.n	80067d2 <xPortStartScheduler+0x42>
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	e7fe      	b.n	80067d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067d2:	4b38      	ldr	r3, [pc, #224]	; (80068b4 <xPortStartScheduler+0x124>)
 80067d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	22ff      	movs	r2, #255	; 0xff
 80067e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	4b30      	ldr	r3, [pc, #192]	; (80068b8 <xPortStartScheduler+0x128>)
 80067f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067fa:	4b30      	ldr	r3, [pc, #192]	; (80068bc <xPortStartScheduler+0x12c>)
 80067fc:	2207      	movs	r2, #7
 80067fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006800:	e009      	b.n	8006816 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006802:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <xPortStartScheduler+0x12c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3b01      	subs	r3, #1
 8006808:	4a2c      	ldr	r2, [pc, #176]	; (80068bc <xPortStartScheduler+0x12c>)
 800680a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	b2db      	uxtb	r3, r3
 8006814:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800681e:	2b80      	cmp	r3, #128	; 0x80
 8006820:	d0ef      	beq.n	8006802 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <xPortStartScheduler+0x12c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f1c3 0307 	rsb	r3, r3, #7
 800682a:	2b04      	cmp	r3, #4
 800682c:	d009      	beq.n	8006842 <xPortStartScheduler+0xb2>
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60bb      	str	r3, [r7, #8]
 8006840:	e7fe      	b.n	8006840 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006842:	4b1e      	ldr	r3, [pc, #120]	; (80068bc <xPortStartScheduler+0x12c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	4a1c      	ldr	r2, [pc, #112]	; (80068bc <xPortStartScheduler+0x12c>)
 800684a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800684c:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <xPortStartScheduler+0x12c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006854:	4a19      	ldr	r2, [pc, #100]	; (80068bc <xPortStartScheduler+0x12c>)
 8006856:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	b2da      	uxtb	r2, r3
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <xPortStartScheduler+0x130>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <xPortStartScheduler+0x130>)
 8006866:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800686a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800686c:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <xPortStartScheduler+0x130>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a13      	ldr	r2, [pc, #76]	; (80068c0 <xPortStartScheduler+0x130>)
 8006872:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006876:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006878:	f000 f8d6 	bl	8006a28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800687c:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <xPortStartScheduler+0x134>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006882:	f000 f8f5 	bl	8006a70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006886:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <xPortStartScheduler+0x138>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a0f      	ldr	r2, [pc, #60]	; (80068c8 <xPortStartScheduler+0x138>)
 800688c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006890:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006892:	f7ff ff69 	bl	8006768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006896:	f7ff f871 	bl	800597c <vTaskSwitchContext>
	prvTaskExitError();
 800689a:	f7ff ff27 	bl	80066ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3718      	adds	r7, #24
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	e000ed00 	.word	0xe000ed00
 80068ac:	410fc271 	.word	0x410fc271
 80068b0:	410fc270 	.word	0x410fc270
 80068b4:	e000e400 	.word	0xe000e400
 80068b8:	20000d1c 	.word	0x20000d1c
 80068bc:	20000d20 	.word	0x20000d20
 80068c0:	e000ed20 	.word	0xe000ed20
 80068c4:	20000014 	.word	0x20000014
 80068c8:	e000ef34 	.word	0xe000ef34

080068cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068e4:	4b0e      	ldr	r3, [pc, #56]	; (8006920 <vPortEnterCritical+0x54>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	4a0d      	ldr	r2, [pc, #52]	; (8006920 <vPortEnterCritical+0x54>)
 80068ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068ee:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <vPortEnterCritical+0x54>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d10e      	bne.n	8006914 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <vPortEnterCritical+0x58>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d009      	beq.n	8006914 <vPortEnterCritical+0x48>
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	e7fe      	b.n	8006912 <vPortEnterCritical+0x46>
	}
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20000014 	.word	0x20000014
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800692e:	4b11      	ldr	r3, [pc, #68]	; (8006974 <vPortExitCritical+0x4c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <vPortExitCritical+0x22>
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	e7fe      	b.n	8006948 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800694a:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <vPortExitCritical+0x4c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3b01      	subs	r3, #1
 8006950:	4a08      	ldr	r2, [pc, #32]	; (8006974 <vPortExitCritical+0x4c>)
 8006952:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <vPortExitCritical+0x4c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <vPortExitCritical+0x3e>
 800695c:	2300      	movs	r3, #0
 800695e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000014 	.word	0x20000014
	...

08006980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006980:	f3ef 8009 	mrs	r0, PSP
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <pxCurrentTCBConst>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f01e 0f10 	tst.w	lr, #16
 8006990:	bf08      	it	eq
 8006992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699a:	6010      	str	r0, [r2, #0]
 800699c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069a4:	f380 8811 	msr	BASEPRI, r0
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f7fe ffe4 	bl	800597c <vTaskSwitchContext>
 80069b4:	f04f 0000 	mov.w	r0, #0
 80069b8:	f380 8811 	msr	BASEPRI, r0
 80069bc:	bc09      	pop	{r0, r3}
 80069be:	6819      	ldr	r1, [r3, #0]
 80069c0:	6808      	ldr	r0, [r1, #0]
 80069c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c6:	f01e 0f10 	tst.w	lr, #16
 80069ca:	bf08      	it	eq
 80069cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069d0:	f380 8809 	msr	PSP, r0
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst>:
 80069e0:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a00:	f7fe ff04 	bl	800580c <xTaskIncrementTick>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <SysTick_Handler+0x3c>)
 8006a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	2300      	movs	r3, #0
 8006a14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a1c:	bf00      	nop
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a28:	b480      	push	{r7}
 8006a2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a2c:	4b0b      	ldr	r3, [pc, #44]	; (8006a5c <vPortSetupTimerInterrupt+0x34>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a32:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <vPortSetupTimerInterrupt+0x38>)
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a38:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <vPortSetupTimerInterrupt+0x3c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a0a      	ldr	r2, [pc, #40]	; (8006a68 <vPortSetupTimerInterrupt+0x40>)
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	099b      	lsrs	r3, r3, #6
 8006a44:	4a09      	ldr	r2, [pc, #36]	; (8006a6c <vPortSetupTimerInterrupt+0x44>)
 8006a46:	3b01      	subs	r3, #1
 8006a48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a4a:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <vPortSetupTimerInterrupt+0x34>)
 8006a4c:	2207      	movs	r2, #7
 8006a4e:	601a      	str	r2, [r3, #0]
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	e000e010 	.word	0xe000e010
 8006a60:	e000e018 	.word	0xe000e018
 8006a64:	20000008 	.word	0x20000008
 8006a68:	10624dd3 	.word	0x10624dd3
 8006a6c:	e000e014 	.word	0xe000e014

08006a70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a80 <vPortEnableVFP+0x10>
 8006a74:	6801      	ldr	r1, [r0, #0]
 8006a76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a7a:	6001      	str	r1, [r0, #0]
 8006a7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a7e:	bf00      	nop
 8006a80:	e000ed88 	.word	0xe000ed88

08006a84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a8a:	f3ef 8305 	mrs	r3, IPSR
 8006a8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b0f      	cmp	r3, #15
 8006a94:	d913      	bls.n	8006abe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a96:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <vPortValidateInterruptPriority+0x6c>)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006aa0:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <vPortValidateInterruptPriority+0x70>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	7afa      	ldrb	r2, [r7, #11]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d209      	bcs.n	8006abe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	607b      	str	r3, [r7, #4]
 8006abc:	e7fe      	b.n	8006abc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006abe:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <vPortValidateInterruptPriority+0x74>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <vPortValidateInterruptPriority+0x78>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d909      	bls.n	8006ae2 <vPortValidateInterruptPriority+0x5e>
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	e7fe      	b.n	8006ae0 <vPortValidateInterruptPriority+0x5c>
	}
 8006ae2:	bf00      	nop
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	e000e3f0 	.word	0xe000e3f0
 8006af4:	20000d1c 	.word	0x20000d1c
 8006af8:	e000ed0c 	.word	0xe000ed0c
 8006afc:	20000d20 	.word	0x20000d20

08006b00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b0c:	f7fe fdc4 	bl	8005698 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b10:	4b57      	ldr	r3, [pc, #348]	; (8006c70 <pvPortMalloc+0x170>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b18:	f000 f90c 	bl	8006d34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b1c:	4b55      	ldr	r3, [pc, #340]	; (8006c74 <pvPortMalloc+0x174>)
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f040 808c 	bne.w	8006c42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d01c      	beq.n	8006b6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006b30:	2208      	movs	r2, #8
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4413      	add	r3, r2
 8006b36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d013      	beq.n	8006b6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f023 0307 	bic.w	r3, r3, #7
 8006b48:	3308      	adds	r3, #8
 8006b4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f003 0307 	and.w	r3, r3, #7
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <pvPortMalloc+0x6a>
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	e7fe      	b.n	8006b68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d068      	beq.n	8006c42 <pvPortMalloc+0x142>
 8006b70:	4b41      	ldr	r3, [pc, #260]	; (8006c78 <pvPortMalloc+0x178>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d863      	bhi.n	8006c42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b7a:	4b40      	ldr	r3, [pc, #256]	; (8006c7c <pvPortMalloc+0x17c>)
 8006b7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b7e:	4b3f      	ldr	r3, [pc, #252]	; (8006c7c <pvPortMalloc+0x17c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b84:	e004      	b.n	8006b90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d903      	bls.n	8006ba2 <pvPortMalloc+0xa2>
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f1      	bne.n	8006b86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006ba2:	4b33      	ldr	r3, [pc, #204]	; (8006c70 <pvPortMalloc+0x170>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d04a      	beq.n	8006c42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	4413      	add	r3, r2
 8006bb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	1ad2      	subs	r2, r2, r3
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d91e      	bls.n	8006c0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d009      	beq.n	8006bf4 <pvPortMalloc+0xf4>
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	e7fe      	b.n	8006bf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	1ad2      	subs	r2, r2, r3
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c06:	69b8      	ldr	r0, [r7, #24]
 8006c08:	f000 f8f6 	bl	8006df8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c0c:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <pvPortMalloc+0x178>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <pvPortMalloc+0x178>)
 8006c18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c1a:	4b17      	ldr	r3, [pc, #92]	; (8006c78 <pvPortMalloc+0x178>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <pvPortMalloc+0x180>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d203      	bcs.n	8006c2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c26:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <pvPortMalloc+0x178>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a15      	ldr	r2, [pc, #84]	; (8006c80 <pvPortMalloc+0x180>)
 8006c2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	4b10      	ldr	r3, [pc, #64]	; (8006c74 <pvPortMalloc+0x174>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	431a      	orrs	r2, r3
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c42:	f7fe fd37 	bl	80056b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <pvPortMalloc+0x164>
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	e7fe      	b.n	8006c62 <pvPortMalloc+0x162>
	return pvReturn;
 8006c64:	69fb      	ldr	r3, [r7, #28]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3728      	adds	r7, #40	; 0x28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	2000492c 	.word	0x2000492c
 8006c74:	20004938 	.word	0x20004938
 8006c78:	20004930 	.word	0x20004930
 8006c7c:	20004924 	.word	0x20004924
 8006c80:	20004934 	.word	0x20004934

08006c84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d046      	beq.n	8006d24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c96:	2308      	movs	r3, #8
 8006c98:	425b      	negs	r3, r3
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	4b20      	ldr	r3, [pc, #128]	; (8006d2c <vPortFree+0xa8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <vPortFree+0x42>
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e7fe      	b.n	8006cc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <vPortFree+0x5e>
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	60bb      	str	r3, [r7, #8]
 8006ce0:	e7fe      	b.n	8006ce0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <vPortFree+0xa8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d019      	beq.n	8006d24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d115      	bne.n	8006d24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <vPortFree+0xa8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	43db      	mvns	r3, r3
 8006d02:	401a      	ands	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d08:	f7fe fcc6 	bl	8005698 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	4b07      	ldr	r3, [pc, #28]	; (8006d30 <vPortFree+0xac>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4413      	add	r3, r2
 8006d16:	4a06      	ldr	r2, [pc, #24]	; (8006d30 <vPortFree+0xac>)
 8006d18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f000 f86c 	bl	8006df8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d20:	f7fe fcc8 	bl	80056b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d24:	bf00      	nop
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20004938 	.word	0x20004938
 8006d30:	20004930 	.word	0x20004930

08006d34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d40:	4b27      	ldr	r3, [pc, #156]	; (8006de0 <prvHeapInit+0xac>)
 8006d42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3307      	adds	r3, #7
 8006d52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	4a1f      	ldr	r2, [pc, #124]	; (8006de0 <prvHeapInit+0xac>)
 8006d64:	4413      	add	r3, r2
 8006d66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d6c:	4a1d      	ldr	r2, [pc, #116]	; (8006de4 <prvHeapInit+0xb0>)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d72:	4b1c      	ldr	r3, [pc, #112]	; (8006de4 <prvHeapInit+0xb0>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d80:	2208      	movs	r2, #8
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0307 	bic.w	r3, r3, #7
 8006d8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4a15      	ldr	r2, [pc, #84]	; (8006de8 <prvHeapInit+0xb4>)
 8006d94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d96:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <prvHeapInit+0xb4>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d9e:	4b12      	ldr	r3, [pc, #72]	; (8006de8 <prvHeapInit+0xb4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2200      	movs	r2, #0
 8006da4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006db4:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <prvHeapInit+0xb4>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	4a0a      	ldr	r2, [pc, #40]	; (8006dec <prvHeapInit+0xb8>)
 8006dc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4a09      	ldr	r2, [pc, #36]	; (8006df0 <prvHeapInit+0xbc>)
 8006dca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dcc:	4b09      	ldr	r3, [pc, #36]	; (8006df4 <prvHeapInit+0xc0>)
 8006dce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006dd2:	601a      	str	r2, [r3, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	20000d24 	.word	0x20000d24
 8006de4:	20004924 	.word	0x20004924
 8006de8:	2000492c 	.word	0x2000492c
 8006dec:	20004934 	.word	0x20004934
 8006df0:	20004930 	.word	0x20004930
 8006df4:	20004938 	.word	0x20004938

08006df8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e00:	4b28      	ldr	r3, [pc, #160]	; (8006ea4 <prvInsertBlockIntoFreeList+0xac>)
 8006e02:	60fb      	str	r3, [r7, #12]
 8006e04:	e002      	b.n	8006e0c <prvInsertBlockIntoFreeList+0x14>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d8f7      	bhi.n	8006e06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d108      	bne.n	8006e3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	441a      	add	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	441a      	add	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d118      	bne.n	8006e80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b15      	ldr	r3, [pc, #84]	; (8006ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d00d      	beq.n	8006e76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	441a      	add	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	e008      	b.n	8006e88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e003      	b.n	8006e88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d002      	beq.n	8006e96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20004924 	.word	0x20004924
 8006ea8:	2000492c 	.word	0x2000492c

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4e0d      	ldr	r6, [pc, #52]	; (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1ba4      	subs	r4, r4, r6
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	42a5      	cmp	r5, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4e0b      	ldr	r6, [pc, #44]	; (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	; (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f000 f82c 	bl	8006f1c <_init>
 8006ec4:	1ba4      	subs	r4, r4, r6
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2500      	movs	r5, #0
 8006eca:	42a5      	cmp	r5, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ed4:	4798      	blx	r3
 8006ed6:	3501      	adds	r5, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ede:	4798      	blx	r3
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	08006fd0 	.word	0x08006fd0
 8006ee8:	08006fd0 	.word	0x08006fd0
 8006eec:	08006fd0 	.word	0x08006fd0
 8006ef0:	08006fd4 	.word	0x08006fd4

08006ef4 <memcpy>:
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	1e43      	subs	r3, r0, #1
 8006ef8:	440a      	add	r2, r1
 8006efa:	4291      	cmp	r1, r2
 8006efc:	d100      	bne.n	8006f00 <memcpy+0xc>
 8006efe:	bd10      	pop	{r4, pc}
 8006f00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f08:	e7f7      	b.n	8006efa <memcpy+0x6>

08006f0a <memset>:
 8006f0a:	4402      	add	r2, r0
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d100      	bne.n	8006f14 <memset+0xa>
 8006f12:	4770      	bx	lr
 8006f14:	f803 1b01 	strb.w	r1, [r3], #1
 8006f18:	e7f9      	b.n	8006f0e <memset+0x4>
	...

08006f1c <_init>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	bf00      	nop
 8006f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f22:	bc08      	pop	{r3}
 8006f24:	469e      	mov	lr, r3
 8006f26:	4770      	bx	lr

08006f28 <_fini>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	bf00      	nop
 8006f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2e:	bc08      	pop	{r3}
 8006f30:	469e      	mov	lr, r3
 8006f32:	4770      	bx	lr
